Imports System.IO
Imports System.Data
Imports System.Math
Imports System.Data.SqlClient
Imports System.Web.Configuration
Imports System.Globalization
Imports Telerik.Web.UI

Partial Class timesheetCandidate
    Inherits System.Web.UI.Page
    Dim weekEndingDate As String = Nothing
    Dim newWeekEndingDate As String = Nothing
    Dim dt As DateTime = Nothing
    Dim userId As Guid = Membership.GetUser.ProviderUserKey
    Dim engageCode As String = Nothing
    Dim addAmendment As Boolean = False
    Dim timesheetId As String = Nothing
    Dim dtTimeSheetData, dtTimeSheetEntries As DataTable
    Dim timeSheetCode As String = Nothing
    Dim totalAmendments, currentAmendmentCount As Integer
    Dim weekHours(7) As String
    Public dtTempTimeSheet As New DataTable()
    Dim tempTime_View As DataView
    Dim tempTime_Table As DataTable
    Dim tempDeletedRows As New DataTable
    Dim dtTimeSheetWeeks As New DataTable
    Dim dataPopulated As Boolean = False
    Dim blnAllowMonday As Boolean = True
    Dim blnAllowTuesday As Boolean = True
    Dim blnAllowWednesday As Boolean = True
    Dim blnAllowThursday As Boolean = True
    Dim blnAllowFriday As Boolean = True
    Dim blnAllowSaturday As Boolean = True
    Dim blnAllowSunday As Boolean = True
    Dim blnInvalidTime As Boolean = False
    Dim blnFirstRow As Boolean = False
    Dim cultureInfo As CultureInfo
    Dim strUserRole As String = Nothing
    Dim hashCandiateEngagments As New Hashtable
    Dim invisiblerowcount As Integer
    Dim prevRowUserID As String
    '<summary>Page_Load: Loading Candidate Engagement details,Filling Weekending,Engagement compoboxes</summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(18-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Dim lbnMTimeSheets As HtmlAnchor = Master.FindControl("lbnMTimeSheets")
        lbnMTimeSheets.Attributes.Add("class", "active")

        Dim rdrApprEmail As SqlDataReader = Nothing
        Dim rdrCandidate As SqlDataReader = Nothing
        cultureInfo = Session("localizationInfo")

        Dim engCodeCnt As Integer = Nothing

        Dim vendorCode As String = Nothing
        Dim apprEmailAddress As String = Nothing

        Me.Title = "Empower VMS - Timesheet"
        'ViewState("dtTempTimeSheet") = Nothing
        currentAmendmentCount = 0
        ViewState("amendmentCount") = 0
        dtTimeSheetWeeks = Session("timeSheetWeeks")
        txtGetCandidate.Attributes.Add("ReadOnly", "True")
        lblApprUserName.Style.Value = "font-style:normal"
        If Not Request.QueryString("timesheetId") Is Nothing Then
            timeSheetCode = cEncryption.Decrypt(Request.QueryString("timesheetId"))
        End If
        'If session is empty, the page will redirected to the login page
        strUserRole = Roles.GetRolesForUser(Membership.GetUser.UserName)(0)



        'Initialize
        lblMsg.Text = ""
        ViewState("thisWeekHasData") = False
        ViewState("timeSheetGridHasData") = False
        ViewState("status_code") = "DRA"
        divTimeSheet.Visible = True
        divNodata.Visible = False
        tempDataTable()
        createTableRowsForDeletedData()
        tempTime_View = New DataView(tempTime_Table)
        'btnAddCostCenter.Attributes.Add("onClick", "popup()")
        'btnDraft.Attributes.Add("onClick", "return checkCalculated()")
        btnSave.Attributes.Add("onClick", "return checkCalculated()")

        If Not Page.IsPostBack Then
            If Not Request.QueryString("timesheetId") Is Nothing Then
                timeSheetCode = cEncryption.Decrypt(Request.QueryString("timesheetId"))
                Dim cTimesheet As cTimesheet
                cTimesheet = New cTimesheet(cEncryption.Decrypt(Request.QueryString("timesheetId")).ToString)
                Dim rdrClient As SqlDataReader = cTimesheet.getClientEmailID()
                Try
                    If rdrClient.HasRows() Then
                        Do While rdrClient.Read
                            If Not rdrClient("email_address").Equals(System.DBNull.Value) Then
                                ViewState("client_email_address") = rdrClient("email_address").ToString
                            Else
                                ViewState("client_email_address") = ""
                            End If
                        Loop
                    End If

                Finally
                    rdrClient.Close()
                End Try
            End If

            If Not Request.QueryString("eng_code") Is Nothing Then
                Dim cEngagement As cEngagement
                cEngagement = New cEngagement(cEncryption.Decrypt(Request.QueryString("eng_code")).ToString)
                Dim rdrClient As SqlDataReader = cEngagement.getClientEmailID()
                Try
                    If rdrClient.HasRows() Then
                        Do While rdrClient.Read
                            If Not rdrClient("email_address").Equals(System.DBNull.Value) Then
                                ViewState("client_email_address") = rdrClient("email_address").ToString
                            Else
                                ViewState("client_email_address") = ""
                            End If
                        Loop
                    End If

                Finally
                    rdrClient.Close()
                End Try
            End If
            'EngagementUtility.updateCurrentEngagementRate(VMSUserUtility.getClientCodeForAllUser(Membership.GetUser.ProviderUserKey))


            'getBillingStructureDetails()
            'strUserRole = Roles.GetRolesForUser(Membership.GetUser.UserName)(0)
            ViewState("currentAmendmentCount") = 0
            ViewState("pageLoad") = True
            'If strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or _
            '   strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER") Then
            '    'ddlCandidate.Visible = True
            '    lblCandidateName.Visible = False
            '    divTimeSheet.Visible = True
            '    trPickCandForVendor.Visible = True
            '    'divCandidate.Visible = True


            '    'divCandVendorHeader.Visible = True
            '    'trCommentHistory.Visible = False
            '    vendorCode = VMSUserUtility.getCompanyCodeForUser(Membership.GetUser.ProviderUserKey)
            '    rdrCandidate = CandidateUtility.getVendorCandidate(vendorCode)
            '    If Not ViewState("hashCandiateEngagments") Is Nothing Then
            '        hashCandiateEngagments = ViewState("hashCandiateEngagments")
            '    End If
            '    Try
            '        If rdrCandidate.HasRows Then
            '            Do While rdrCandidate.Read()

            '                If Not ddlCandidate.Items.Contains(New ListItem(rdrCandidate("full_name"), rdrCandidate("user_id").ToString)) Then
            '                    ddlCandidate.Items.Add(New ListItem(rdrCandidate("full_name"), rdrCandidate("user_id").ToString))
            '                End If

            '                If Not hashCandiateEngagments.ContainsKey(rdrCandidate("user_id")) Then
            '                    hashCandiateEngagments.Add(rdrCandidate("user_id"), rdrCandidate("engagement_code"))
            '                End If
            '                lblCandidateName.Text = rdrCandidate("full_name").ToString
            '                hdnCandUserID.Value = rdrCandidate("user_id").ToString
            '            Loop
            '            rdrCandidate.Close()
            '            ViewState("hashCandiateEngagments") = hashCandiateEngagments
            '        Else
            '            divNodata.Visible = True
            '            lblNoData.Text = "Sorry!! No candidates for adding timesheet."
            '            Exit Sub
            '        End If
            '        If hdnCandUserID.Value = "" Then
            '            hdnCandUserID.Value = Membership.GetUser.ProviderUserKey.ToString
            '        End If
            '        Dim objCandGUID As New Guid(hdnCandUserID.Value.ToString)
            '        userId = objCandGUID
            '    Finally
            '        rdrCandidate.Close()
            '    End Try

            'Else
            '    hdnCandUserID.Value = Membership.GetUser.ProviderUserKey.ToString
            'End If

            If Request.QueryString("timesheetId") = Nothing Then
                If strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or
               strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER") Then
                    hdnCandUserID.Value = Session("timesheet_user").ToString 'ddlCandidate.SelectedValue.ToString
                    dtTimeSheetWeeks = CandidateUtility.fillCandidateTimesheet(New Guid(hdnCandUserID.Value), "").Tables(1)
                    Dim dv As DataView = dtTimeSheetWeeks.DefaultView
                    dtTimeSheetWeeks = dv.ToTable(False, New String("week_ending_date"))
                    Session("timeSheetWeeks") = dtTimeSheetWeeks
                    hdnIsNewTimesheet.Value = True
                ElseIf strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_CANDIDATE") Then
                    hdnCandUserID.Value = Membership.GetUser.ProviderUserKey.ToString
                End If
                txtGetCandidate.Text = ""
                checkForCandidateTimesheet(New Guid(hdnCandUserID.Value))
                'ViewState("timesheet_Id") = Nothing
                txtApprovalStatus.Text = ""
                hdnCalculated.Value = "True"


                If dlExtraHours.Items.Count > 0 Then
                    For i = 0 To dlExtraHours.Items.Count - 1
                        Dim txtMonUnits As TextBox = dlExtraHours.Items(i).FindControl("txtMonUnits")
                        txtMonUnits.Text = ""
                        Dim txtTueUnits As TextBox = dlExtraHours.Items(i).FindControl("txtTueUnits")
                        txtTueUnits.Text = ""
                        Dim txtWedUnits As TextBox = dlExtraHours.Items(i).FindControl("txtWedUnits")
                        txtWedUnits.Text = ""
                        Dim txtThuUnits As TextBox = dlExtraHours.Items(i).FindControl("txtThuUnits")
                        txtThuUnits.Text = ""
                        Dim txtFriUnits As TextBox = dlExtraHours.Items(i).FindControl("txtFriUnits")
                        txtFriUnits.Text = ""
                        Dim txtSatUnits As TextBox = dlExtraHours.Items(i).FindControl("txtSatUnits")
                        txtSatUnits.Text = ""
                        Dim txtSunUnits As TextBox = dlExtraHours.Items(i).FindControl("txtSunUnits")
                        txtSunUnits.Text = ""
                    Next
                End If
                UpdatePanel1.Update()
                'ScriptManager.RegisterStartupScript(Me, Me.GetType(), Guid.NewGuid().ToString(), "checkHoursMinutes();" + Page.ClientScript.GetPostBackEventReference(Me, "") + ";", True)
            Else
                timesheetId = cEncryption.Decrypt(Request.QueryString("timesheetId"))
                hdnIsNewTimesheet.Value = False
                If Not timesheetId = "" Then
                    ViewState("timesheet_Id") = timesheetId
                    PopulateTimesheetFromObject("", timesheetId)
                    ddlWeekEnding.Enabled = False
                    ddlCandidate.Enabled = False
                    txtGetCandidate.Enabled = False
                End If
                lblMsgNoTimesheet.Visible = False
                getEmailAddressOfClientVendorUsers()
            End If

            ' Added on 10-JUL-2012
            ' This is to create the breadcrump for going back to the page, from where you had come.
            ' This breadcrump will be displayed only in few pages. Here when breadcrump is bound, based on the logged in user role, 
            ' the parent page URL is set whether it is for client or vendor
            Dim vmsPathToDetails As SiteMapPath = DirectCast(Master.FindControl("vmsPathToDetails"), System.Web.UI.WebControls.SiteMapPath)
            vmsPathToDetails.Visible = True
            AddHandler vmsPathToDetails.ItemDataBound, AddressOf Me.vmsPathToDetails_ItemDataBound

        End If

        '13-08-2015|Gunnaiah| Modified for Hide manual Timesheet entry
        Dim client_details As tbl_client_info = CandidateUtility.CheckTimesheetManualEntry(cEncryption.Decrypt(Request.QueryString("eng_code")))
        'If Session("is_enable_manual_timesheet_entry") AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
        '    dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
        '    dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
        '    dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
        '    dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
        'End If
        If Not IsNothing(client_details) AndAlso Not IsNothing(client_details.is_enable_manual_timesheet_entry) AndAlso client_details.is_enable_manual_timesheet_entry AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
            dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
            dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
            dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
            dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
            hdnCalculated.Value = True
        End If
        IsMarathon()
    End Sub


    Private Sub IsMarathon()
        Dim b As Boolean = Convert.ToBoolean(Session("is_enable_marathon"))
        If (Convert.ToBoolean(Session("is_enable_marathon")) = True) Then
            'Dhandapani|10-Sep-2015|Label changes for Marathon login and bind Account Manager
            lblReportingManagerHead.InnerText = "Account Manager"
            trLocation.Visible = False
            btnAddCostCenter.Visible = False
            If Not IsNothing(Request.QueryString("eng_code")) Then

                Dim timesheet_approver As tbl_automated_timesheet_approver = AutomatedTimesheetAprover.getApprovalDetailsToTimeSheet(cEncryption.Decrypt(Request.QueryString("eng_code")))
                If Not IsNothing(timesheet_approver) Then
                    tdApproverEmailIDHeader.Visible = True
                    tdApproverEmailIDBody.Visible = True
                    lblApproverEmailID.Text = timesheet_approver.timesheet_approver_email_id
                End If

            End If
        End If


    End Sub
    '<summary>populateEngagementDetails: This is to populdate the engagement details, like start and end dates, position title of the selected candidate </summary>
    '<param name=”candUserID”></param>
    '<returns>INTEGER : Engagement Count</param>
    '<author>RGBSI</author>
    '<creationDate>(06-JUN-2012)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Function populateEngagementDetails(ByVal candUserID As Guid) As Integer

        Dim rdrCandidateEngagement As SqlDataReader = Nothing
        Dim rdrBusinessUnit As SqlDataReader = Nothing
        Dim rdrApprEmail As SqlDataReader = Nothing
        Dim rdrWeekDates As SqlDataReader = Nothing
        Dim apprEmailAddress As String = Nothing
        Dim clientCode As String = ""
        Dim tempEngCode As String = ""
        Dim engCodeCnt As Integer = 0
        Dim indexDropDown As Integer = 0
        Dim newRow As DataRow() = Nothing
        Dim hasWeek As Boolean = False
        Dim firstWeek As String = ""
        Dim focusIndex As Integer = 0

        initializeViewState()

        rdrCandidateEngagement = CandidateUtility.getEngagementDetailsForCandidate(cEncryption.Decrypt(Request.QueryString("eng_code")))
        Try
            If rdrCandidateEngagement.HasRows Then
                Do While rdrCandidateEngagement.Read()
                    If engCodeCnt = 0 Then

                        'ddlCandidate.Items.Add(rdrCandidateEngagement("cand_name").ToString)
                        lblSubmitUserName.Text = rdrCandidateEngagement("cand_name").ToString
                        lblCandidateName.Text = rdrCandidateEngagement("cand_name").ToString
                        txtGetCandidate.Text = lblCandidateName.Text
                        lblCandidateName.Visible = True
                        'Dhandapani|10-Sep-2015|Label changes for Marathon login and bind Account Manager
                        If (Convert.ToBoolean(Session("is_enable_marathon")) = True) Then
                            lblManagerName.Text = rdrCandidateEngagement("hiring_manager_name").ToString
                        Else
                            lblManagerName.Text = rdrCandidateEngagement("timeUser").ToString
                        End If
                        lblPosTitleName.Text = rdrCandidateEngagement("job_opening_position_title")
                        ViewState("FirstName") = rdrCandidateEngagement("first_name").ToString
                        ViewState("LastName") = rdrCandidateEngagement("last_name").ToString
                        ViewState("CandidateCode") = rdrCandidateEngagement("candidate_code").ToString
                        ViewState("ApproverId") = rdrCandidateEngagement("ApproverId").ToString
                        ViewState("CandEmail") = rdrCandidateEngagement("candidate_email_address").ToString
                        ViewState("ApproverEmail") = rdrCandidateEngagement("appr_email").ToString
                        ViewState("Client") = rdrCandidateEngagement("company_name").ToString
                        ViewState("start_date") = rdrCandidateEngagement("start_date").ToString
                        ViewState("end_date") = rdrCandidateEngagement("end_date").ToString
                        ViewState("structureID") = rdrCandidateEngagement("structure_id").ToString '"11"
                        clientCode = rdrCandidateEngagement("client_id").ToString
                        ViewState("clientCode") = rdrCandidateEngagement("client_id").ToString
                        ViewState("hiring_manager_email") = rdrCandidateEngagement("hiring_manager_email").ToString
                        ViewState("hiring_manager_id") = rdrCandidateEngagement("hiring_manager_id")
                        ViewState("reporting_manager_email") = rdrCandidateEngagement("reporting_manager_email")
                        ViewState("reporting_manager_id") = rdrCandidateEngagement("reporting_manager_id")
                        ViewState("timesheet_entry_day") = rdrCandidateEngagement("timesheet_entry_day")
                        ViewState("work_location") = rdrCandidateEngagement("work_location")
                        If Not rdrCandidateEngagement("work_location").Equals(System.DBNull.Value) Then
                            lblLocation.Text = CStr(rdrCandidateEngagement("work_location"))
                        End If
                        If Not rdrCandidateEngagement("backup_timesheet_approver").Equals(System.DBNull.Value) Then
                            ViewState("backupTimeSheetApprover_1") = rdrCandidateEngagement("backup_timesheet_approver")
                        Else
                            ViewState("backupTimeSheetApprover_1") = ""
                        End If

                        If Not rdrCandidateEngagement("backup_timesheet_approver_2").Equals(System.DBNull.Value) Then
                            ViewState("backupTimeSheetApprover_2") = rdrCandidateEngagement("backup_timesheet_approver_2")
                        Else
                            ViewState("backupTimeSheetApprover_2") = ""
                        End If

                        If Not rdrCandidateEngagement("response_std_rate").Equals(System.DBNull.Value) Then
                            ViewState("response_std_rate") = rdrCandidateEngagement("response_std_rate").ToString
                        Else
                            ViewState("response_std_rate") = "0"
                        End If

                        If Not rdrCandidateEngagement("location_name").Equals(System.DBNull.Value) Then
                            ViewState("client_location") = rdrCandidateEngagement("location_name").ToString
                        Else
                            ViewState("client_location") = Nothing
                        End If
                        If ViewState("ApproverId").ToString Is Nothing Then
                            ViewState("ApproverId") = rdrCandidateEngagement("timesheet_approver").ToString
                        End If
                        'If Not rdrCandidateEngagement("client_business_unit").Equals(System.DBNull.Value) Then
                        '    ViewState("client_business_unit") = rdrCandidateEngagement("client_business_unit").ToString
                        'Else
                        '    ViewState("client_business_unit") = Nothing
                        'End If
                        ViewState("is_ot_allowed") = rdrCandidateEngagement("is_ot_allowed")
                        Session("is_ot_allowed") = rdrCandidateEngagement("is_ot_allowed")
                        'txtApprovalStatus.Text = "New/Save"
                        txtApprovalStatus.Visible = False
                    End If
                    '  Show only the ACTIVE Engagements
                    If rdrCandidateEngagement("current_engagement_status").ToString = ConfigurationManager.AppSettings("ENGAGEMENT_STATUS_ACTIVE").ToString Or _
                        rdrCandidateEngagement("current_engagement_status").ToString = ConfigurationManager.AppSettings("ENGAGEMENT_STATUS_EXTENDED").ToString Or _
                        rdrCandidateEngagement("current_engagement_status").ToString = ConfigurationManager.AppSettings("ENGAGEMENT_STATUS_COMPLETED") Then
                        If Not tempEngCode Is Nothing And Not tempEngCode.Equals(rdrCandidateEngagement("engagement_code").ToString) Then
                            ddlEngmtCode.Items.Add(New ListItem(rdrCandidateEngagement("engagement_code"), rdrCandidateEngagement("engagement_code")))
                            engCodeCnt = engCodeCnt + 1 ' Checking the count of engagements the candidate having 
                            tempEngCode = rdrCandidateEngagement("engagement_code").ToString
                            hdnEngagementCode.Value = tempEngCode
                        End If
                    End If

                    ' Added to retrieve the cost centre and business Unit id for the job opening
                    'ViewState("business_unit_id") = rdrCandidateEngagement("job_opening_business_unit_id")
                    'ViewState("cost_center_id") = rdrCandidateEngagement("job_opening_cost_center_id")
                    'ViewState("cost_center_name") = rdrCandidateEngagement("cost_center_name")
                    ViewState("owner_vendor_code") = rdrCandidateEngagement("owner_vendor_code")
                    If ViewState("business_unit_id") Is Nothing Then
                        Dim dsEngagementBUCostCenter As DataSet = cBUCostCenter.getBUCostCentersForEnagagements(ddlEngmtCode.SelectedValue)
                        If dsEngagementBUCostCenter.Tables.Count > 0 Then
                            hdnCostCenterCount.Value = dsEngagementBUCostCenter.Tables(0).Rows.Count
                            If dsEngagementBUCostCenter.Tables(0).Rows.Count > 0 Then
                                'If dsEngagementBUCostCenter.Tables(0).Rows.Count = 1 Then
                                ' Added to retrieve the cost centre and business Unit id for the job opening
                                ViewState("business_unit_id") = dsEngagementBUCostCenter.Tables(0).Rows(0)("client_business_unit_id")
                                ViewState("cost_center_id") = dsEngagementBUCostCenter.Tables(0).Rows(0)("client_cost_center_id")
                                ViewState("cost_center_name") = dsEngagementBUCostCenter.Tables(0).Rows(0)("cost_center_name")
                                'End If
                            End If
                        End If
                    End If
                Loop

                divTimeSheet.Visible = True
                'divCandidate.Visible = True
                divNodata.Visible = False
            Else
                divTimeSheet.Visible = False
                divNodata.Visible = True
                Exit Function
            End If
            'vendorCode = VMSUserUtility.getCompanyCodeForUser(Membership.GetUser.ProviderUserKey)
            rdrBusinessUnit = ClientUtility.getBusinessUnit(clientCode)
            selBusinessUnit.Items.Clear()
            selBusinessUnit.Items.Add(New ListItem("", ""))
            If rdrBusinessUnit.HasRows Then
                Do While rdrBusinessUnit.Read()
                    If rdrBusinessUnit("is_active") Then
                        selBusinessUnit.Items.Add(New ListItem(rdrBusinessUnit("client_business_unit_name"), rdrBusinessUnit("client_business_unit_id").ToString))
                    End If
                Loop
            End If
            rdrBusinessUnit.Close()
            rdrBusinessUnit = Nothing
            ' Retrieve the email address for all timeSheet Approvers for this engagement
            rdrApprEmail = EngagementUtility.getTimeSheetApproverEmailAddress(tempEngCode)
            If rdrApprEmail.HasRows Then
                Do While rdrApprEmail.Read()
                    If apprEmailAddress Is Nothing Then
                        apprEmailAddress = rdrApprEmail("email_address").ToString
                    Else
                        apprEmailAddress = apprEmailAddress + "," + rdrApprEmail("email_address").ToString
                    End If
                Loop
                rdrApprEmail.Close()
                rdrApprEmail = Nothing
                ViewState("ApproverEmail") = ViewState("ApproverEmail") & "," & apprEmailAddress
            End If
        Finally
            rdrCandidateEngagement.Close()
            rdrCandidateEngagement = Nothing
        End Try

        '---Filling the Sundays of an year till the current week
        Dim weekday As DayOfWeek = ViewState("timesheet_entry_day")
        Dim startDate As DateTime = FormUtility.StartOfWeek(ViewState("start_date"), DayOfWeek.Monday)
        Dim defaultDate As DateTime = FormUtility.StartOfWeek(Today, DayOfWeek.Monday)
        Dim exactStartDate As DateTime = ViewState("start_date")
        Dim exactEndDate As DateTime = ViewState("end_date")
        Dim exactEndDateWeekStartDay As DateTime
        exactEndDateWeekStartDay = FormUtility.StartOfWeek(exactEndDate, DayOfWeek.Monday)
        Dim compareEndDate As DateTime = IIf(defaultDate < exactEndDateWeekStartDay, defaultDate, exactEndDateWeekStartDay)
        If startDate >= defaultDate.AddDays(7) Then
            divNodata.Visible = True
            divTimeSheet.Visible = False
            lblNoData.Text = "You cannot create Timesheet since Engagement starts from " & Format(exactStartDate, WebConfigurationManager.AppSettings("DATE_FORMAT"))
            Exit Function
        Else
            divNodata.Visible = False
            divTimeSheet.Visible = True
        End If
        'rdrWeekDates = FormUtility.getWeekDates(startDate, defaultDate.AddDays(7), WebConfigurationManager.AppSettings("WEEK_STARTING_DATE"))

        If ddlWeekEnding.Items.Count = 0 Then
            ' Populate the weekending dates for the selected candidate's engagement - Weekening dates from engagement start date to till date
            ddlWeekEnding.Items.Clear()
            rdrWeekDates = FormUtility.getWeekDates(startDate, compareEndDate.AddDays(7), WebConfigurationManager.AppSettings("WEEK_STARTING_DATE"))
            Try
                If rdrWeekDates.HasRows Then
                    Do While rdrWeekDates.Read()
                        ddlWeekEnding.Items.Add(New ListItem(Format(CDate(rdrWeekDates("NewDate")), cultureInfo.DateTimeFormat.ShortDatePattern), rdrWeekDates("dates")))
                        ddlWeekEnding.SelectedIndex = indexDropDown

                        If (strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_CANDIDATE") Or _
                            strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or _
                            strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER")) And _
                            Not dtTimeSheetWeeks Is Nothing Then
                            If Not dtTimeSheetWeeks Is Nothing Then
                                newRow = dtTimeSheetWeeks.Select("week_ending_date = '" + Format(CDate(rdrWeekDates("NewDate")), cultureInfo.DateTimeFormat.ShortDatePattern) + "'")
                                If newRow.Length = 0 And firstWeek = "" Then
                                    firstWeek = rdrWeekDates("dates")
                                    focusIndex = indexDropDown
                                End If
                            End If
                            indexDropDown = indexDropDown + 1
                        End If

                    Loop

                End If

                If IIf(Today.DayOfWeek = 0, 7, Today.DayOfWeek) < IIf(ViewState("timesheet_entry_day") = 0, 7, ViewState("timesheet_entry_day")) Then
                    ddlWeekEnding.Items.Remove(ddlWeekEnding.Items.FindByText(Format(Date.Today.AddDays(7 - Today.DayOfWeek), cultureInfo.DateTimeFormat.ShortDatePattern).ToString))
                End If

                If ddlWeekEnding.Items.Count = 0 Then
                    divNodata.Visible = True
                    divTimeSheet.Visible = False
                    lblNoData.Text = "You cannot create Timesheet since your default timesheet entry is from " + weekday.ToString
                    Exit Function
                End If

            Catch ex As Exception
                Throw ex
            Finally
                If firstWeek <> "" Then
                    ddlWeekEnding.SelectedIndex = focusIndex
                Else
                    ddlWeekEnding.SelectedIndex = 0
                End If
                rdrWeekDates.Close()
                rdrWeekDates = Nothing
            End Try
        End If

        Return engCodeCnt
    End Function

    '<summary>checkForCandidateTimesheet: This is to check whether any timesheet is available for the selected candidate and selected week. 
    '    If not, user can create new timesheet. If available, that timesheet has to be populated
    '</summary>
    '<param name=”candUserID”></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(06-JUN-2012)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub checkForCandidateTimesheet(ByVal candUserID As Guid)


        Dim rdrMiscInfo As SqlDataReader = Nothing
        'Dim dtTimeSheetWeeks As New DataTable

        Dim tempEngCode As String = ""
        Dim vendorCode As String = Nothing
        Dim engCodeCnt As Integer = 0

        initializeViewState()

        engCodeCnt = populateEngagementDetails(candUserID)
        If engCodeCnt = 0 Then
            Exit Sub
        End If
        ViewState("engagement_count") = engCodeCnt


        'ddlWeekEnding.SelectedIndex = focusIndex
        If ddlWeekEnding.SelectedValue <> "" Then
            weekEndingDate = CDate(ddlWeekEnding.SelectedValue)
        End If


        ' Populate the page with the Timesheet details
        If Not Request.QueryString("timesheetId") = Nothing Then
            ' For an existing timesheet, populate the page for the selected timesheet id
            timesheetId = cEncryption.Decrypt(Request.QueryString("timesheetId"))
            If Not timesheetId = "" Then
                ViewState("timesheet_Id") = timesheetId
                engCodeCnt = ViewState("engagement_count")
                PopulateTimesheetFromObject("", timesheetId)
                ddlWeekEnding.Enabled = False
                hdnIsNewTimesheet.Value = False
                'divCandVendorHeader.Visible = True
            Else
                GoTo newTimeSheet
            End If
        Else
newTimeSheet:
            ' For a new timesheet, populate the page with basic candidate details.
            btnAddamendment.Visible = False
            hdnIsNewTimesheet.Value = True
            newWeekEndingDate = CDate(ddlWeekEnding.SelectedValue)
            PopulateTimesheetFromObject(weekEndingDate, "", ViewState("CandidateCode"), True)
            'If ViewState("thisWeekHasData") = False Then
            '    createDataTable()
            '    Dim newRow As DataRow = dtTempTimeSheet.NewRow()
            '    newRow.Item(0) = "Regular TimeSheet Entry"
            '    newRow.Item(1) = Convert.ToInt32(ViewState("cost_centre_id"))
            '    newRow.Item(2) = Convert.ToInt32(ViewState("business_unit_id"))
            '    For i = 3 To 30
            '        newRow.Item(i) = "00:00"
            '    Next
            '    dtTempTimeSheet.Rows.Add(newRow)
            '    dlExtraHours.DataSource = Nothing
            '    dlExtraHours.DataSource = dtTempTimeSheet
            '    dlExtraHours.DataBind()
            '    UpdatePanel1.Update()
            '    ViewState("dtTempTimeSheet") = dtTempTimeSheet
            'End If
            gvwTimesheetDetails.DataSource = Nothing
            gvwTimesheetDetails.DataBind()
            trAmendedTS.Visible = False
            ddlWeekEnding.Enabled = True
            dlExtraHours.Enabled = True
            btnAddCostCenter.Enabled = True
            If Not Session("selectedWeek") Is Nothing Then
                ddlWeekEnding.SelectedValue = Session("selectedWeek")
                Session("selectedWeek") = Nothing
            End If
            If hdnIsNewTimesheet.Value = True Then
                btnDraft.Enabled = True
                btnDraft.Visible = True
                btnBack.Visible = True
                btnBack.Enabled = True
                btnSave.Enabled = True
                btnSave.Visible = True
                btnPrint.Enabled = True
                btnReset.Enabled = True
                btnReset.Visible = True
                lblCurrentStatus.Text = ""
                divComments.Visible = True
                dlistStatusHistory.DataSource = Nothing
                dlistStatusHistory.DataBind()
                divCommentsHistory.Visible = False
            End If

            If Not engCodeCnt = 0 Then
                engageCode = tempEngCode 'ddlEngmtCode.SelectedItem.Text.ToString
                If engageCode = "" Then
                    engageCode = hdnEngagementCode.Value
                End If
                rdrMiscInfo = CandidateUtility.getMiscInfo(engageCode)
                Try
                    If rdrMiscInfo.HasRows Then
                        Do While rdrMiscInfo.Read()
                            If Not rdrMiscInfo("po_number").Equals(System.DBNull.Value) Then
                                lblPurchOrderNo.Text = rdrMiscInfo("po_number")
                            End If
                            If Not rdrMiscInfo("gl_account_number").Equals(System.DBNull.Value) Then
                                lblGLAccntNo.Text = rdrMiscInfo("gl_account_number")
                            End If
                            If Not rdrMiscInfo("job_opening_position_title").Equals(System.DBNull.Value) Then
                                lblPosTitleName.Text = rdrMiscInfo("job_opening_position_title")
                            End If
                            If Not rdrMiscInfo("company_name").Equals(System.DBNull.Value) Then
                                lblClientName.Text = rdrMiscInfo("company_name")
                            End If
                            If Not rdrMiscInfo("client_job_number").Equals(System.DBNull.Value) Then
                                lblClientJobNo.Text = rdrMiscInfo("client_job_number")
                            End If
                        Loop
                    End If

                    dt = ddlWeekEnding.SelectedValue
                    lblPeriodFrom.Text = Format(CDate(dt.AddDays(-6)), "dddd, MMMM d, yyyy")
                    lblPeriodTo.Text = Format(dt, "dddd, MMMM d, yyyy")

                Catch ex As Exception
                    Throw ex
                Finally
                    rdrMiscInfo.Close()
                    rdrMiscInfo = Nothing
                End Try
            Else
                lblMsg.Text = "This candidate has no ACTIVE engagements, and so, not possible to create timeSheets."
                lnkFocus.Focus()
                ddlWeekEnding.Enabled = False
                dlExtraHours.Enabled = False
                btnAddCostCenter.Enabled = False
                btnDraft.Enabled = False
                btnBack.Enabled = True
                btnSave.Enabled = False
                btnPrint.Enabled = False
                btnReset.Enabled = False
            End If
        End If

        If engCodeCnt = 1 Then
            ddlEngmtCode.Enabled = False
        Else
            ddlEngmtCode.Enabled = True
        End If
        hideControls()
        If ViewState("status_code") = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE") And hdnIsNewTimesheet.Value = False Then
            DisableControls()
            btnAddCostCenter.Visible = False
            'hypOverTime.Enabled = False
            'btnAddamendment.Visible = True
        ElseIf ViewState("status_code") = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE") And hdnIsNewTimesheet.Value = False Then
            btnSave.Visible = True
            btnDraft.Visible = False
            btnAddCostCenter.Visible = True
        Else
            EnableControls()
            divComments.Visible = True
            btnAddCostCenter.Visible = True
        End If

        getEmailAddressOfClientVendorUsers()

        If dlExtraHours.Items.Count > 0 Then
            Dim btnCalculate As ImageButton = dlExtraHours.Items(0).FindControl("btnCalculate")
            btnCalculate.Attributes.Add("onClick", "removeErrorMessage();")
        Else
            btnDraft.Visible = False
            btnBack.Visible = True
            btnSave.Visible = False
            btnPrint.Visible = False
        End If

    End Sub

    '<summary>getEmailAddressOfClientVendorUsers: This is to get the email addresses of the client and vendor users associated with the candidate</summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(08-AUG-2012)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub getEmailAddressOfClientVendorUsers()

        ' Retrieving the mail id for the vendor users and client users
        Dim dsVendorUserEmail As DataSet = VendorUserUtility.fillVendorUsers(ViewState("owner_vendor_code"), ViewState("clientCode"))
        Dim drBackUpTSApprover As DataRow()
        Dim backUpTSApprover_email As String = ""
        ViewState("vendor_user_email") = ""
        For i = 0 To dsVendorUserEmail.Tables(0).Rows.Count - 1
            If ViewState("vendor_user_email") = "" Then
                ViewState("vendor_user_email") = dsVendorUserEmail.Tables(0).Rows(i).Item("email_address").ToString
                ViewState("vendor_user_id") = dsVendorUserEmail.Tables(0).Rows(i).Item("user_id").ToString
            Else
                ViewState("vendor_user_email") = ViewState("vendor_user_email") & "," & dsVendorUserEmail.Tables(0).Rows(i).Item("email_address").ToString
                ViewState("vendor_user_id") = ViewState("vendor_user_id") & "," & dsVendorUserEmail.Tables(0).Rows(i).Item("user_id").ToString
            End If
            ViewState("vendor_user_id") = dsVendorUserEmail.Tables(0).Rows(i).Item("user_id").ToString()
        Next
        Dim dtTimeSheetApprover As DataTable = ClientUserUtility.get_TS_Approver_Emails(ViewState("clientCode"))
        If ViewState("backupTimeSheetApprover_1") IsNot Nothing Then
            drBackUpTSApprover = dtTimeSheetApprover.Select("user_id ='" + ViewState("backupTimeSheetApprover_1").ToString + "'")
            If drBackUpTSApprover.Length > 0 Then
                backUpTSApprover_email = drBackUpTSApprover(0).Item("email_address").ToString
            End If
        End If
        If ViewState("backupTimeSheetApprover_2") IsNot Nothing Then
            drBackUpTSApprover = dtTimeSheetApprover.Select("user_id = '" + ViewState("backupTimeSheetApprover_2").ToString + "'")
            If drBackUpTSApprover.Length > 0 Then
                backUpTSApprover_email = backUpTSApprover_email & "," & drBackUpTSApprover(0).Item("email_address").ToString
            End If
            ViewState("backUpTSApprover_email") = backUpTSApprover_email
        End If

    End Sub

    '<summary>DisableControls: Disabling Controls</summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(15-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub DisableControls()
        ddlEngmtCode.Enabled = False
        divComments.Visible = False
        'txtRegMon.Enabled = False
        'txtRegTue.Enabled = False
        'txtRegWed.Enabled = False
        'txtRegThu.Enabled = False
        'txtRegFri.Enabled = False
        'txtRegSat.Enabled = False
        'txtRegSun.Enabled = False

        'txtOvrMon.Enabled = False
        'txtOvrTue.Enabled = False
        'txtOvrWed.Enabled = False
        'txtOvrThu.Enabled = False
        'txtOvrFri.Enabled = False
        'txtOvrSat.Enabled = False
        'txtOvrSun.Enabled = False

        'txtHolMon.Enabled = False
        'txtHolTue.Enabled = False
        'txtHolWed.Enabled = False
        'txtHolThu.Enabled = False
        'txtHolFri.Enabled = False
        'txtHolSat.Enabled = False
        'txtHolSun.Enabled = False

        'txtNotesMon.Enabled = False
        'txtNotesTue.Enabled = False
        'txtNotesWed.Enabled = False
        'txtNotesThu.Enabled = False
        'txtNotesFri.Enabled = False
        'txtNotesSat.Enabled = False
        'txtNotesSun.Enabled = False

        'btnAutoFill.Disabled = True
        'btnReset.Disabled = True
        'btnDraft.Enabled = False
        'btnSave.Enabled = False
        btnBack.Visible = True
        'btnAutoFill.Visible = False
        btnPrint.Visible = True
        btnDraft.Visible = False
        btnSave.Visible = False
    End Sub
    '<summary>EnableControls: Enabling Controls</summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>

    '<creationDate>(15-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub EnableControls()
        ddlEngmtCode.Enabled = True
        divComments.Visible = True
        'txtRegMon.Enabled = True
        'txtRegTue.Enabled = True
        'txtRegWed.Enabled = True
        'txtRegThu.Enabled = True
        'txtRegFri.Enabled = True
        'txtRegSat.Enabled = True
        'txtRegSun.Enabled = True

        'txtNotesMon.Enabled = True
        'txtNotesTue.Enabled = True
        'txtNotesWed.Enabled = True
        'txtNotesThu.Enabled = True
        'txtNotesFri.Enabled = True
        'txtNotesSat.Enabled = True
        'txtNotesSun.Enabled = True

        'If ViewState("is_ot_allowed") = True Then
        '    txtOvrMon.Enabled = True
        '    txtOvrTue.Enabled = True
        '    txtOvrWed.Enabled = True
        '    txtOvrThu.Enabled = True
        '    txtOvrFri.Enabled = True
        '    txtOvrSat.Enabled = True
        '    txtOvrSun.Enabled = True

        '    txtHolMon.Enabled = True
        '    txtHolTue.Enabled = True
        '    txtHolWed.Enabled = True
        '    txtHolThu.Enabled = True
        '    txtHolFri.Enabled = True
        '    txtHolSat.Enabled = True
        '    txtHolSun.Enabled = True
        'End If

        'txtVacMon.Enabled = True
        'txtVacTue.Enabled = True
        'txtVacWed.Enabled = True
        'txtVacThr.Enabled = True
        'txtVacFri.Enabled = True
        'txtVacSat.Enabled = True
        'txtVacSun.Enabled = True

        'txtHolMon.Enabled = True
        'txtHolTue.Enabled = True
        'txtHolWed.Enabled = True
        'txtHolThr.Enabled = True
        'txtHolFri.Enabled = True
        'txtHolSat.Enabled = True
        'txtHolSun.Enabled = True

        'btnAutoFill.Visible = True
        'btnReset.Visible = True
        If lblCurrentStatus.Text <> ConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL") And _
             lblCurrentStatus.Text <> ConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE_FULL") Then
            btnDraft.Visible = True
        End If
        btnSave.Visible = True
        btnPrint.Visible = True
    End Sub
    '<summary>btnSave_Click: Saving the timesheet as status as PENDING </summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(20-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Protected Sub btnSave_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSave.Click
        Dim lblMonday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblMonday")
        Dim lblTuesday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblTuesday")
        Dim lblWednesday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblWednesday")
        Dim lblThursday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblThursday")
        Dim lblFriday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblFriday")
        Dim lblSaturday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblSaturday")
        Dim lblSunday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblSunday")

        'If lblMonday.Text = "00:00" And lblTuesday.Text = "00:00" And lblWednesday.Text = "00:00" And lblThursday.Text = "00:00" And _
        'lblFriday.Text = "00:00" And lblSaturday.Text = "00:00" And lblSunday.Text = "00:00" Then
        '    lblMsg.Text = "Please enter the hours worked, for the selected week, for saving the timesheet."
        '    lnkFocus.Focus()
        '    Exit Sub
        'End If
        If hdnCalculated.Value = "False" Then
            lblMsg.Text = "You must click the Calculate button before saving the timesheet."
            lnkFocus.Focus()
            Exit Sub
        Else
            currentAmendmentCount = ViewState("currentAmendmentCount")
            addAmendment = ViewState("addAmendment")
            getDataForSaving()
            If blnInvalidTime Then
                lnkFocus.Focus()
                Exit Sub
            End If
            If ViewState("timesheet_Id") = Nothing Then
                SaveTimesheet(WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL"))
            ElseIf addAmendment Then
                SaveTimesheet(WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL"), addAmendment)
            Else
                UpdateTimesheet(WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL"))
            End If
            If strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or _
             strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER") Then
                Response.Redirect("~/manageTimesheetVendor.aspx", False)
            ElseIf strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_CANDIDATE") Then
                Response.Redirect("~/manageTimeSheets.aspx", False)
            End If


            lblMsg.Visible = False
            'txtApprovalStatus.Text = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL")
            'txtApprovalStatus.Visible = True
            'txtAppStatusHeading.Visible = True
        End If
    End Sub
    '<summary>btnDraft_Click: Saving the timesheet as status as DRAFT </summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(20-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Protected Sub btnDraft_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnDraft.Click
        Dim lblMonday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblMonday")
        Dim lblTuesday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblTuesday")
        Dim lblWednesday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblWednesday")
        Dim lblThursday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblThursday")
        Dim lblFriday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblFriday")
        Dim lblSaturday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblSaturday")
        Dim lblSunday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblSunday")

        'If lblMonday.Text = "00:00" And lblTuesday.Text = "00:00" And lblWednesday.Text = "00:00" And lblThursday.Text = "00:00" And _
        'lblFriday.Text = "00:00" And lblSaturday.Text = "00:00" And lblSunday.Text = "00:00" Then
        '    lblMsg.Text = "Please enter the hours worked, for the selected week, for saving the timesheet."
        '    lnkFocus.Focus()
        '    Exit Sub
        'End If
        If hdnCalculated.Value = "False" Then
            lblMsg.Text = "You must click the Calculate button before saving the timesheet."
            lnkFocus.Focus()
            Exit Sub
        Else
            currentAmendmentCount = ViewState("currentAmendmentCount")
            addAmendment = ViewState("addAmendment")
            getDataForSaving()
            If blnInvalidTime Then
                lnkFocus.Focus()
                Exit Sub
            End If
            Session("selectedWeek") = ddlWeekEnding.SelectedValue
            If ViewState("timesheet_Id") = Nothing Then
                SaveTimesheet(WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE_FULL"))
            ElseIf addAmendment Then
                SaveTimesheet(WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE_FULL"), True)
            Else
                UpdateTimesheet(WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE_FULL"))
            End If
            ' txtApprovalStatus.Text = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE_FULL")
            ' txtApprovalStatus.Visible = True
            'txtAppStatusHeading.Visible = True
            '  lblMsg.Text = "Thank you. Timesheet has been saved as Draft."
            'lblMsg.Visible = False
            If ViewState("timesheet_Id") IsNot Nothing Then
                Response.Redirect("~/timesheetCandidate.aspx?timesheetId=" + cEncryption.Encrypt(ViewState("timesheet_Id").ToString) + "&status=" + cEncryption.Encrypt(WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE")) + "&eng_code=" + Request.QueryString("eng_code").ToString, False)
            End If

            'Response.Redirect("~/manageTimeSheets.aspx", False)
        End If

    End Sub

    '<summary>calcTime: Calculate time for billing </summary>
    '<param name=”time”></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(14-JUN-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Function calcTime(ByVal time As String) As Decimal
        Dim min As String() = time.Split(":")
        Dim minute As Decimal
        Dim newMin As String
        Try
            minute = (Convert.ToInt16(min(1)) / 60) * 100
            If Round(minute) < 10 Then
                newMin = "0" + Round(minute).ToString
            Else
                newMin = Round(minute).ToString
            End If

            Return Convert.ToDecimal(min(0).ToString & "." & newMin)
        Catch ex As Exception
            Throw ex
        End Try
    End Function

    '<summary>SaveTimesheet: Saving the timesheet </summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(20-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub SaveTimesheet(ByVal DraftOrSave As String, Optional ByVal isAmendment As Boolean = False)
        Dim loggedInUser As MembershipUser = Nothing
        Dim timeCandCode As String = Nothing
        Dim timesheetTypeCode As String = Nothing
        Dim engagementCode As String = Nothing
        Dim timesheetStatusCode As String = Nothing
        Dim timesheetCode As String = Nothing
        Dim blnFlagFirst As Boolean = False
        Dim retValue, splitValues(2) As String
        Dim hasAmendment As Integer = 0
        Dim dtDetailedTimeSheet As DataTable = ViewState("dtTempTimeSheet")
        Dim timesheetUser As String = ""
        'blnFlagFirst is used to identify the timeSheet is enetered for the first time.
        'If blnFlagFirst=False, a drafted timeSheet is opened and going to be submitted 
        ' or again saved as DRAFT
        'Dim monHours, tueHours, wedHours, thuHours, friHours, satHours, sunHours As Decimal
        If Not Request.QueryString("timesheetId") Is Nothing Then
            timesheetId = cEncryption.Decrypt(Request.QueryString("timesheetId"))
        Else
            timesheetId = hdnTimeSheetID.Value
        End If


        loggedInUser = Membership.GetUser()

        timeCandCode = ViewState("LastName").Substring(0, 2) & ViewState("FirstName").Substring(0, 1) & "TS"
        timeCandCode = timeCandCode.ToUpper
        engagementCode = ddlEngmtCode.SelectedItem.Text.ToString
        weekEndingDate = CDate(ddlWeekEnding.SelectedValue)
        If DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL") Then
            timesheetStatusCode = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE")
        ElseIf DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE_FULL") Then
            timesheetStatusCode = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE")
        End If

        Dim connEmvp2 As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("emvp2").ToString() & ";Timeout=60;")
        connEmvp2.Open()
        Dim transEmvp2 = connEmvp2.BeginTransaction()
        Dim transCmd As New SqlCommand()
        transCmd.Connection = connEmvp2
        ' Transaction begins here
        ' There are multiple DB insertions inside this transaction.
        ' Revise this, and try to combine all the insertions into one single SProc.
        transCmd.Transaction = transEmvp2
        hashCandiateEngagments = ViewState("hashCandiateEngagments")
        Try
            If strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or _
               strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER") Then
                timesheetUser = hdnCandUserID.Value
                engagementCode = hdnEngagementCode.Value
                'hashCandiateEngagments(New Guid(timesheetUser)) 
                'ddlCandidate.SelectedValue.ToString.Split("|")(1)
            ElseIf strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_CANDIDATE") Then
                timesheetUser = loggedInUser.ProviderUserKey.ToString
            End If

            timesheetTypeCode = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_REGULARTYPE_CODE")
            ' If the timesheet entries are an amendment to an existing timesheet, the new entries have to be added as an amendment.
            ' If not an amendment, entries are inserted as a new timesheet
            If addAmendment Then
                retValue = CandidateUtility.insertAmendedTimesheetForCandidate(timesheetTypeCode, timeCandCode, engagementCode, CDate(ddlWeekEnding.SelectedValue), ViewState("CandidateCode"), _
                                         timesheetStatusCode, New Guid(timesheetUser), transCmd, timesheetId, DirectCast(dtDetailedTimeSheet, System.Data.DataTable))
                splitValues = retValue.Split(",")
                hasAmendment = splitValues(1)
                timesheetCode = timesheetId
                blnFlagFirst = True
            Else
                ' Add DUMMY cost Center ID to datatable
                For i = 0 To dtDetailedTimeSheet.Rows.Count - 1
                    If dtDetailedTimeSheet.Rows(i).Item(1) Is Nothing Then
                        dtDetailedTimeSheet.Rows(i).Item(1) = Convert.ToInt32(ViewState("cost_center_id"))
                    End If
                Next

                timesheetCode = CandidateUtility.insertTimesheetForCandidate(timesheetTypeCode, timeCandCode, engagementCode, CDate(ddlWeekEnding.SelectedValue), _
                                                         ViewState("CandidateCode"), timesheetStatusCode, New Guid(timesheetUser), transCmd, Membership.GetUser.ProviderUserKey, "", DirectCast(dtDetailedTimeSheet, System.Data.DataTable))
                blnFlagFirst = True
            End If

            currentAmendmentCount = hasAmendment
            If blnFlagFirst = True And Not timesheetCode Is Nothing Then
                txtApprovalStatus.Text = DraftOrSave
                lblCurrentStatus.Text = DraftOrSave
                txtApprovalStatus.Visible = True
                'txtAppStatusHeading.Visible = True
                Dim objGUID As New Guid(ViewState("ApproverId").ToString)
                ViewState("timesheet_Id_Email") = timesheetCode

                CandidateUtility.insertTimesheetStatus(timesheetCode, timesheetStatusCode, txtComments.Content, _
                                                       loggedInUser.ProviderUserKey, objGUID, transCmd, hasAmendment)

                'lblTotRegHours.Text = txtTotalRegHrs.Value
                'lblTotOvrHours.Text = txtTotalOverHrs.Value
                'lblTotalVacHrs.Text = txtTotalVacHrs.Value
                'lblTotHolHours.Text = txtTotalHolHrs.Value
                lblTotHours.Text = txtTotalHrs.Value
                DisableControls()






                ViewState("timesheet_Id") = timesheetCode
                If Not Session("is_testing_mode_enabled") = True Then
                    If DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL") Then
                        SendMail()
                    End If
                End If

                If DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL") Then
                    insertAlertForAction_Timesheets()
                End If

            End If

            If Not timesheetCode Is Nothing Or Not timesheetCode = "" Then


                'TO INSERT TIMESHEET SPEND
                Dim rtWeeklyHours As String = "00:00"
                Dim otWeeklyHours As String = "00:00"
                Dim dtWeeklyHours As String = "00:00"
                Dim rtSaturdayHours As String = "00:00"
                Dim otSaturdayHours As String = "00:00"
                Dim dtSaturdayHours As String = "00:00"
                Dim rtSundayHours As String = "00:00"
                Dim otSundayHours As String = "00:00"
                Dim dtSundayHours As String = "00:00"

                Dim rtWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "WEEKDAY")
                Dim otWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "WEEKDAY")
                Dim dtWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "WEEKDAY")
                Dim rtSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "SATURDAY")
                Dim otSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "SATURDAY")
                Dim dtSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "SATURDAY")
                Dim rtSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "SUNDAY")
                Dim otSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "SUNDAY")
                Dim dtSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "SUNDAY")


                Dim rtVWeeklyMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "RT", "WEEKDAY")
                Dim otVWeeklyMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "OT", "WEEKDAY")
                Dim dtVWeeklyMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "DT", "WEEKDAY")
                Dim rtVSaturdayMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "RT", "SATURDAY")
                Dim otVSaturdayMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "OT", "SATURDAY")
                Dim dtVSaturdayMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "DT", "SATURDAY")
                Dim rtVSundayMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "RT", "SUNDAY")
                Dim otVSundayMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "OT", "SUNDAY")
                Dim dtVSundayMarkupFactor As String = ClientUtility.getVBillingMarkupFactor(ViewState("structureID"), "DT", "SUNDAY")


                For i = 0 To dtDetailedTimeSheet.Rows.Count - 1
                    rtWeeklyHours = CandidateUtility.totalTime(rtWeeklyHours, CandidateUtility.totalTime(dtDetailedTimeSheet.Rows(i).Item("regular_time_monday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_tuesday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_wednesday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_thursday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_friday")))
                    otWeeklyHours = CandidateUtility.totalTime(otWeeklyHours, CandidateUtility.totalTime(dtDetailedTimeSheet.Rows(i).Item("over_time_monday"), dtDetailedTimeSheet.Rows(i).Item("over_time_tuesday"), dtDetailedTimeSheet.Rows(i).Item("over_time_wednesday"), dtDetailedTimeSheet.Rows(i).Item("over_time_thursday"), dtDetailedTimeSheet.Rows(i).Item("over_time_friday")))
                    dtWeeklyHours = CandidateUtility.totalTime(dtWeeklyHours, CandidateUtility.totalTime(dtDetailedTimeSheet.Rows(i).Item("double_time_monday"), dtDetailedTimeSheet.Rows(i).Item("double_time_tuesday"), dtDetailedTimeSheet.Rows(i).Item("double_time_wednesday"), dtDetailedTimeSheet.Rows(i).Item("double_time_thursday"), dtDetailedTimeSheet.Rows(i).Item("double_time_friday")))

                    rtSaturdayHours = CandidateUtility.totalTime(rtSaturdayHours, dtDetailedTimeSheet.Rows(i).Item("regular_time_saturday"))
                    otSaturdayHours = CandidateUtility.totalTime(otSaturdayHours, dtDetailedTimeSheet.Rows(i).Item("over_time_saturday"))
                    dtSaturdayHours = CandidateUtility.totalTime(dtSaturdayHours, dtDetailedTimeSheet.Rows(i).Item("double_time_saturday"))

                    rtSundayHours = CandidateUtility.totalTime(rtSundayHours, dtDetailedTimeSheet.Rows(i).Item("regular_time_sunday"))
                    otSundayHours = CandidateUtility.totalTime(otSundayHours, dtDetailedTimeSheet.Rows(i).Item("over_time_sunday"))
                    dtSundayHours = CandidateUtility.totalTime(dtSundayHours, dtDetailedTimeSheet.Rows(i).Item("double_time_sunday"))
                Next

                'MsgBox(rtWeeklyHours)
                'MsgBox(otWeeklyHours)
                'MsgBox(dtWeeklyHours)
                'MsgBox(getBillAmount(rtWeeklyHours, ViewState("response_std_rate"), ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "WEEKDAY")))






                CandidateUtility.insertTimeSheetCosts(timesheetCode, hasAmendment, CDate(ddlWeekEnding.SelectedValue), _
                rtWeeklyHours, rtWeeklyMarkupFactor, rtVWeeklyMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(rtWeeklyHours, ViewState("response_std_rate"), rtWeeklyMarkupFactor), _
                rtSaturdayHours, rtSaturdayMarkupFactor, rtVSaturdayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(rtSaturdayHours, ViewState("response_std_rate"), rtSaturdayMarkupFactor), _
                rtSundayHours, rtSundayMarkupFactor, rtVSundayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(rtSundayHours, ViewState("response_std_rate"), rtSundayMarkupFactor), _
                otWeeklyHours, otWeeklyMarkupFactor, otVWeeklyMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(otWeeklyHours, ViewState("response_std_rate"), otWeeklyMarkupFactor), _
                otSaturdayHours, otSaturdayMarkupFactor, otVSaturdayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(otSaturdayHours, ViewState("response_std_rate"), otSaturdayMarkupFactor), _
                otSundayHours, otSundayMarkupFactor, otVSundayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(otSundayHours, ViewState("response_std_rate"), otSundayMarkupFactor), _
                dtWeeklyHours, dtWeeklyMarkupFactor, dtVWeeklyMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(dtWeeklyHours, ViewState("response_std_rate"), dtWeeklyMarkupFactor), _
                dtSaturdayHours, dtSaturdayMarkupFactor, dtVSaturdayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(dtSaturdayHours, ViewState("response_std_rate"), dtSaturdayMarkupFactor), _
                dtSundayHours, dtSundayMarkupFactor, dtVSundayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(dtSundayHours, ViewState("response_std_rate"), dtSundayMarkupFactor), _
                 CandidateUtility.totalTime(CandidateUtility.totalTime(rtWeeklyHours, otWeeklyHours, dtWeeklyHours), CandidateUtility.totalTime(rtSaturdayHours, otSaturdayHours, dtSaturdayHours), _
                                            CandidateUtility.totalTime(rtSundayHours, otSundayHours, dtSundayHours)), loggedInUser.ProviderUserKey)


            End If
            '--Commit Transaction
            transEmvp2.Commit()

        Catch ex As Exception
            transEmvp2.Rollback()
            Throw ex
        Finally
            CandidateUtility.checkForDeletedRows(DirectCast(ViewState("tempDeletedRows"), System.Data.DataTable))
            If Not timesheetCode Is Nothing Or Not timesheetCode = "" Then
                CandidateUtility.insertNonApprovedTimesheetInvoiceCost(timesheetCode, loggedInUser.ProviderUserKey, timesheetStatusCode, hasAmendment, ViewState("structureID"))
            End If
            transCmd.Dispose()
            connEmvp2.Close()
            connEmvp2.Dispose()

        End Try
    End Sub
    'Protected WithEvents Label4 As System.Web.UI.WebControls.Label

    '<summary>PopulateTimesheetFromObject: Populate all the data according to a particular timesheet or by WeekEnding</summary>
    '<param name=”candidateId ”>Candidate ID</param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(26-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub PopulateTimesheetFromObject(Optional ByVal weekEnding As String = "", Optional ByVal timesheetId As String = "", Optional ByVal candidateId As String = "", Optional ByVal isForNewTimesheet As Boolean = False)

        'rdrTimesheet = CandidateUtility.fillTimesheet(weekEnding, timesheetId, candidateId)
        Dim engagement_code As String = ""
        If Request.QueryString("eng_code") <> Nothing Then
            engagement_code = cEncryption.Decrypt(Request.QueryString("eng_code").ToString)
        End If

        dtTimeSheetData = CandidateUtility.fillTimesheet(weekEnding, timesheetId, candidateId, 0, "", engagement_code).Tables(0)
        Dim rowCount As Integer = dtTimeSheetData.Rows.Count

        Session("timeSheetData") = dtTimeSheetData
        ViewState("rowCount") = rowCount
        If rowCount > 0 Then
            hdnCandUserID.Value = dtTimeSheetData.Rows(0).Item("candidate_user_id").ToString
            populateEngagementDetails(New Guid(dtTimeSheetData.Rows(0).Item("candidate_user_id").ToString))
            timesheetId = dtTimeSheetData.Rows(0).Item("timesheet_code").ToString
            ViewState("current_approval_status_code") = dtTimeSheetData.Rows(0).Item("current_approval_status_code").ToString
            timeSheetCode = timesheetId
            hdnTimeSheetID.Value = timesheetId
            ViewState("timesheetId") = timesheetId
        End If
        If Not ViewState("timeSheetGridHasData") Then
            fillTimeSheetsGrid(timesheetId)
        End If
        dtTimeSheetEntries = CandidateUtility.fillTimesheetData(weekEnding, timesheetId, candidateId, Convert.ToInt32(ViewState("amendmentCount")), "", engagement_code).Tables(0)
        ViewState("dtTempTimeSheet") = dtTimeSheetEntries
        If rowCount > 0 Then

            If Not dataPopulated Then
                fillTimeSheetData(dtTimeSheetData.Rows, timesheetId)
            End If
            'If ViewState("cost_center_name") Is Nothing Then
            ViewState("cost_center_name") = dtTimeSheetEntries.Rows(0).Item("cost_center_name").ToString
            'If isForNewTimesheet = False Then
            '    hdnIsNewTimesheet.Value = False
            'ElseIf isForNewTimesheet = True Then
            hdnIsNewTimesheet.Value = isForNewTimesheet
            'End If
            'End If
            dlExtraHours.DataSource = Nothing
            dlExtraHours.DataSource = dtTimeSheetEntries
            dlExtraHours.DataBind()
            ViewState("thisWeekHasData") = True
            lblMsgNoTimesheet.Visible = False
            hdnIsNewTimesheet.Value = False
        ElseIf rowCount = 0 Then


            Dim tempSelectedWeek As Integer = ddlWeekEnding.SelectedIndex
            If isForNewTimesheet = False Then
                newWeekEndingDate = CDate(ddlWeekEnding.SelectedValue)
            End If
            If ddlWeekEnding.SelectedIndex > 0 Then
                ddlWeekEnding.SelectedIndex = tempSelectedWeek - 1
                weekEndingDate = CDate(ddlWeekEnding.SelectedValue)

                PopulateTimesheetFromObject(weekEndingDate, "", ViewState("CandidateCode"), True)
                ddlWeekEnding.SelectedIndex = tempSelectedWeek

            Else

                If hdnCostCenterCount.Value.ToString = "1" Then
                    createDataTable()
                    Dim newRow As DataRow = dtTempTimeSheet.NewRow()
                    newRow.Item(0) = " "
                    newRow.Item(1) = Convert.ToInt32(ViewState("cost_center_id"))
                    newRow.Item(2) = Convert.ToInt32(ViewState("business_unit_id"))
                    For i = 3 To 23
                        newRow.Item(i) = "00:00"
                    Next
                    newRow.Item("cost_center_display_order") = 1
                    dtTempTimeSheet.Rows.Add(newRow)
                    dlExtraHours.DataSource = Nothing
                    dlExtraHours.DataSource = dtTempTimeSheet
                    dlExtraHours.DataBind()
                    ViewState("dtTempTimeSheet") = dtTempTimeSheet
                    lblTotHours.Text = "00:00"
                    EnableControls()
                    lblMsgNoTimesheet.Visible = False
                    btnDraft.Enabled = True
                    btnDraft.Visible = True
                    btnBack.Visible = True
                    btnBack.Enabled = True
                    btnSave.Enabled = True
                    btnSave.Visible = True
                    btnPrint.Enabled = True
                    btnPrint.Visible = True
                Else
                    dlExtraHours.DataSource = Nothing
                    dlExtraHours.DataBind()
                    lblMsgNoTimesheet.Visible = True
                    btnSave.Visible = False
                    btnDraft.Visible = False
                    btnPrint.Visible = False
                End If
            End If
            ViewState("timesheet_Id") = Nothing
            lblCurrentStatus.Text = ""
            txtApprovalStatus.Text = ""
            'hdnCalculated.Value = "False"
            divComments.Visible = True
            dlistStatusHistory.DataSource = Nothing
            dlistStatusHistory.DataBind()
            divCommentsHistory.Visible = False
            hdnIsNewTimesheet.Value = True
        End If
        If dlistStatusHistory.Items.Count <> 0 Then
            Session("timesheetId") = timesheetId
            Session("amendmentCount") = Convert.ToInt32(ViewState("amendmentCount"))
        Else
            Session("timesheetId") = ""
            Session("amendmentCount") = ""
        End If
        'If txtCommentsHistory.Text = "" Then
        '    trCommentHistory.Visible = False
        'Else
        '    trCommentHistory.Visible = True
        'End If
        'If txtApprovalStatus.Text = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE_FULL") Then
        '    btnAddamendment.Visible = True
        '    btnAddamendment.Enabled = True
        'Else
        '    btnAddamendment.Visible = False
        'End If
    End Sub
    '<summary>fillTimeSheetsGrid: Fill the grid for Original and Amended TimeSheets </summary>
    '<param name=”timesheetId”></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(10-SEPT-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>

    Private Sub fillTimeSheetsGrid(ByVal timesheetId As String, Optional ByVal display As Boolean = False)

        If Not timeSheetCode Is Nothing Then
            timesheetId = timeSheetCode
        End If
        Dim dsAmendTimeSheet As DataSet = CandidateUtility.getTimesheetDetails(timesheetId)
        Dim cultureInfo As CultureInfo = Session("localizationInfo")
        Dim dtTimeSheets As DataTable = dsAmendTimeSheet.Tables(0)
        Dim column As New DataColumn()
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "TimeSheetName"
        dtTimeSheets.Columns.Add(column)
        Dim rowsCount As Integer = dtTimeSheets.Rows.Count
        Dim count As Integer = 0
        Dim createDate As String
        Do While count < rowsCount
            createDate = Format(dtTimeSheets.Rows(count).Item("create_timestamp"), cultureInfo.DateTimeFormat.ShortDatePattern)
            If dtTimeSheets.Rows(count).Item("amendment_count") = 0 Then
                dtTimeSheets.Rows(count).Item("TimeSheetName") = "Original TimeSheet On " & createDate
            Else
                dtTimeSheets.Rows(count).Item("TimeSheetName") = "Amended TimeSheet " & count & " On " & createDate
            End If
            count = count + 1
        Loop
        totalAmendments = count
        'ViewState("amendmentCount") = rowsCount - 1
        If display And dsAmendTimeSheet.Tables(0).Rows.Count = 1 Then
            trAmendedTS.Visible = True
            gvwTimesheetDetails.DataSource = dtTimeSheets
            gvwTimesheetDetails.DataBind()
            Exit Sub
        ElseIf dsAmendTimeSheet.Tables(0).Rows.Count = 0 Then
            trAmendedTS.Visible = False
            Exit Sub
        ElseIf dsAmendTimeSheet.Tables(0).Rows.Count > 1 Then
            trAmendedTS.Visible = True
            gvwTimesheetDetails.DataSource = dtTimeSheets
            gvwTimesheetDetails.DataBind()
        End If
        ViewState("timeSheetGridHasData") = True
    End Sub

    '<summary>fillTimeSheetData: Fill the timesheet hours for the selected timesheet, into the datalist in the page </summary>
    '<param name=”rowTimeSheet, timesheetId”></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(10-SEPT-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description: fillTimeSheetData: Fill the timesheet hours for the selected timesheet, into the datalist in the page  </history>
    Private Sub fillTimeSheetData(ByVal rowTimeSheet As DataRowCollection, ByVal timesheetId As String)
        Dim cultureInfo As CultureInfo = Session("localizationInfo")
        Dim rdrManagerName As SqlDataReader = Nothing
        Dim rdrTimesheetComments As SqlDataReader = Nothing
        Dim blnFlagChk As Boolean = False
        Dim dtWeekDate As Date
        Dim onlyOnceReg As Boolean = False
        Dim onlyOnceHol As Boolean = False
        Dim onlyOnceOvr As Boolean = False
        dtTempTimeSheet = New DataTable
        dataPopulated = True
        Try
            'Initialize
            lblTotHours.Text = "00:00"
            Dim count As Integer = 0
            Dim rowCount As Integer = rowTimeSheet.Count
            'fillRegularHours(rowTimeSheet(0))            
            'fillOverTimeHours(rowTimeSheet(0))            
            'fillHolidayHours(rowTimeSheet(0))
            count = count + 1
            currentAmendmentCount = rowTimeSheet(0).Item("amendment_count")
            ViewState("currentAmendmentCount") = rowTimeSheet(0).Item("amendment_count")

            If blnFlagChk = False Then
                dtWeekDate = rowTimeSheet(0).Item("week_ending")
                ddlWeekEnding.Enabled = True
                ddlWeekEnding.SelectedValue = dtWeekDate
                ddlEngmtCode.Items.Add(rowTimeSheet(0).Item("engagement_code"))
                ddlEngmtCode.Enabled = True
                lblClientName.Text = rowTimeSheet(0).Item("company_name")
                lblClientJobNo.Text = rowTimeSheet(0).Item("client_job_number").ToString

                lblSubmitedDate.Text = Format(CDate(rowTimeSheet(0).Item("create_timestamp")), cultureInfo.DateTimeFormat.ShortDatePattern)
                lblApprUserName.Text = rowTimeSheet(0).Item("approver_name") + "(" + rowTimeSheet(0).Item("approver_email") + ")"
                lblApprUserName.Style.Value = "font-style:normal"
                If rowTimeSheet(0).Item("status") = WebConfigurationManager.AppSettings("CANDIDATE_EXPENSE_STATUS_APPROVED_FULL") Then
                    'Dhanda test lblApprovedDate.Text = Format(CDate(rowTimeSheet(0).Item("log_approval_timestamp")), cultureInfo.DateTimeFormat.ShortDatePattern)
                End If
                lblPosTitleName.Text = rowTimeSheet(0).Item("job_opening_position_title")
                ViewState("status_code") = rowTimeSheet(0).Item("current_approval_status_code")
                If ViewState("status_code") = "APP" And Not ViewState("originalTimeSheet") Then
                    btnAddamendment.Visible = True
                ElseIf ViewState("status_code") = "PEN" Then
                    btnAddamendment.Visible = False
                End If
                lblPurchOrderNo.Text = rowTimeSheet(0).Item("po_number").ToString()
                lblGLAccntNo.Text = rowTimeSheet(0).Item("gl_account_number").ToString
                txtApprovalStatus.Text = rowTimeSheet(0).Item("status")
                txtApprovalStatus.Visible = True
                'txtApprovalStatus.BackColor = Drawing.Color.Yellow
                lblCurrentStatus.Text = rowTimeSheet(0).Item("status")
                'ViewState("client_location") = rowTimeSheet(0).Item("client_location")
                'ViewState("client_business_unit") = rowTimeSheet(0).Item("client_business_unit")

                If rowTimeSheet(0).Item("status") = "APPROVED" Then
                    txtApprovalStatus.Text = txtApprovalStatus.Text '+ " BY " + rdrTimesheet("appr_name") + " ON " + rdrTimesheet("appr_date")
                ElseIf rowTimeSheet(0).Item("status") = "PENDING" Or rowTimeSheet(0).Item("status") = "DRAFT" Then
                    lblApprovedDate.Text = ""
                    lblApprUserName.Text = ""
                End If

                ViewState("timesheet_Id") = rowTimeSheet(0).Item("timesheet_code")
                If timesheetId Is Nothing Or timesheetId = "" Then
                    timesheetId = rowTimeSheet(0).Item("timesheet_code")
                End If


                dt = ddlWeekEnding.SelectedValue
                lblPeriodFrom.Text = Format(CDate(dt.AddDays(-6)), "dddd, MMMM d, yyyy")
                lblPeriodTo.Text = Format(dt, "dddd, MMMM d, yyyy")

            End If
            blnFlagChk = True


            lblTotHours.Text = formatTime(lblTotHours.Text)
            txtTotalHrs.Value = lblTotHours.Text
            'Dhandapani|10-Sep-2015|Label changes for Marathon login and bind Account Manager
            If (Convert.ToBoolean(Session("is_enable_marathon")) = False) Then
                rdrManagerName = CandidateUtility.getEngagementForCandidate(userId)
                If rdrManagerName.HasRows Then
                    Do While rdrManagerName.Read()
                        If Not rdrManagerName("timeUser").ToString.Equals(System.DBNull.Value) And lblManagerName.Text = "" Then
                            lblManagerName.Text = rdrManagerName("timeUser").ToString
                        End If
                    Loop
                End If
                If Not rdrManagerName.IsClosed Then
                    rdrManagerName.Close()
                End If
                rdrManagerName = Nothing
            End If

            'dt = ddlWeekEnding.SelectedValue
            'lblMonDate.Text = "(" & Format(CDate(dt.AddDays(-6)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
            'lblTueDate.Text = "(" & Format(CDate(dt.AddDays(-5)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
            'lblWedDate.Text = "(" & Format(CDate(dt.AddDays(-4)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
            'lblThuDate.Text = "(" & Format(CDate(dt.AddDays(-3)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
            'lblFriDate.Text = "(" & Format(CDate(dt.AddDays(-2)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
            'lblSatDate.Text = "(" & Format(CDate(dt.AddDays(-1)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
            'lblSunDate.Text = "(" & Format(CDate(dt.AddDays(0)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"

        Catch ex As Exception
            Throw ex
        Finally
            If lblApprUserName.Text = "" Then
                lblApprUserName.Text = "Not Available"
                lblApprUserName.Style.Value = "font-style:italic"
            End If
            If lblClientJobNo.Text = "" Then
                lblClientJobNo.Text = "Not Available"
                lblClientJobNo.Style.Value = "font-style:italic"
            End If
            If lblPosTitleName.Text = "" Then
                lblPosTitleName.Text = "Not Available"
                lblPosTitleName.Style.Value = "font-style:italic"
            End If
            If lblPurchOrderNo.Text = "" Then
                lblPurchOrderNo.Text = "Not Available"
                lblPurchOrderNo.Style.Value = "font-style:italic"
            End If
            If lblGLAccntNo.Text = "" Then
                lblGLAccntNo.Text = "Not Available"
                lblGLAccntNo.Style.Value = "font-style:italic"
            End If
            If lblApprovedDate.Text = "" Then
                lblApprovedDate.Text = "Not Available"
                lblApprovedDate.Style.Value = "font-style:italic"
            End If
        End Try
        If Not timesheetId = Nothing Then
            Try
                Dim dtTimesheetComments As DataTable = CandidateUtility.populateTimesheetComments(timesheetId, currentAmendmentCount).Tables(0)
                If dtTimesheetComments.Rows.Count > 0 Then
                    dlistStatusHistory.DataSource = dtTimesheetComments
                    dlistStatusHistory.DataBind()
                    divCommentsHistory.Visible = True
                End If
            Finally

            End Try
            If Not Request.QueryString("status") Is Nothing Then
                If cEncryption.Decrypt(Request.QueryString("status")) = "APP" Then
                    btnAddamendment.Visible = True
                Else
                    btnAddamendment.Visible = False
                End If
            Else
                btnAddamendment.Visible = False
            End If
        End If
        If ViewState("status_code") = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE") Then
            DisableControls()
            btnAddCostCenter.Visible = False
        ElseIf ViewState("status_code") = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE") Then
            btnSave.Visible = True
            btnDraft.Visible = False
            btnAddCostCenter.Visible = True
        Else
            EnableControls()
            divComments.Visible = True
            btnAddCostCenter.Visible = True
        End If
    End Sub
    '<summary>formatTime: Format the time in to HH:MM format</summary>
    '<param name=” ”></param>
    '<returns>formatted time as string</param>
    '<author>RGBSI</author>
    '<creationDate>(10-JUN-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Function formatTime(ByVal monTime As String, Optional ByVal tueTime As String = "00:00", _
                    Optional ByVal wedTime As String = "00:00", Optional ByVal thuTime As String = "00:00", _
                    Optional ByVal friTime As String = "00:00", Optional ByVal satTime As String = "00:00", _
                    Optional ByVal sunTime As String = "00:00") As String

        Dim hour, min, newTimeMin, newTimeHour As Short
        If monTime = "" Then
            monTime = "00:00"
        End If
        If tueTime = "" Then
            tueTime = "00:00"
        End If
        If wedTime = "" Then
            wedTime = "00:00"
        End If
        If thuTime = "" Then
            thuTime = "00:00"
        End If
        If friTime = "" Then
            friTime = "00:00"
        End If
        If satTime = "" Then
            satTime = "00:00"
        End If
        If sunTime = "" Then
            sunTime = "00:00"
        End If
        Try
            Dim monNewTime As String() = monTime.Split(":")
            Dim tueNewTime As String() = tueTime.Split(":")
            Dim wedNewTime As String() = wedTime.Split(":")
            Dim thuNewTime As String() = thuTime.Split(":")
            Dim friNewTime As String() = friTime.Split(":")
            Dim satNewTime As String() = satTime.Split(":")
            Dim sunNewTime As String() = sunTime.Split(":")

            newTimeHour = Convert.ToInt16(monNewTime(0)) + Convert.ToInt16(tueNewTime(0)) + Convert.ToInt16(wedNewTime(0)) + _
                         Convert.ToInt16(thuNewTime(0)) + Convert.ToInt16(friNewTime(0)) + Convert.ToInt16(satNewTime(0)) + _
                         Convert.ToInt16(sunNewTime(0))
            newTimeMin = Convert.ToInt16(monNewTime(1)) + Convert.ToInt16(tueNewTime(1)) + Convert.ToInt16(wedNewTime(1)) + _
                         Convert.ToInt16(thuNewTime(1)) + Convert.ToInt16(friNewTime(1)) + Convert.ToInt16(satNewTime(1)) + _
                         Convert.ToInt16(sunNewTime(1))
            hour = 0
            min = newTimeMin
            Dim minNew As String = Nothing
            Dim hourNew As String = Nothing
            If newTimeMin >= 60 Then
                min = newTimeMin Mod 60
                hour = Truncate(newTimeMin / 60)
            End If
            newTimeHour = newTimeHour + hour
            hourNew = newTimeHour
            minNew = min
            If Len(newTimeHour.ToString) = 1 Then
                hourNew = "0" + newTimeHour.ToString
            End If
            If Len(min.ToString) = 1 Then
                minNew = "0" + min.ToString
            End If
            If (hourNew.ToString + ":" + minNew.ToString) = "0:0" Then
                Return "00:00"
            Else
                Return hourNew.ToString + ":" + minNew.ToString
            End If

        Catch ex As Exception
            'lblMsg.Text = ex.Message.ToString
            Throw ex
        End Try
        Return ""
    End Function

    Protected Sub ddlWeekEnding_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ddlWeekEnding.SelectedIndexChanged
        Dim cultureInfo As CultureInfo = Session("localizationInfo")
        ClearControls()
        lblApprUserName.Text = "Not Available"
        lblApprUserName.Style.Value = "font-style:italic"
        weekEndingDate = CDate(ddlWeekEnding.SelectedValue)
        ViewState("status_code") = ""
        ViewState("timesheet_Id") = Nothing
        trAmendedTS.Visible = False
        divCommentsHistory.Visible = False
        dlistStatusHistory.DataSource = Nothing
        dlistStatusHistory.DataBind()
        'dt = ddlWeekEnding.SelectedValue
        'lblMonDate.Text = "(" & Format(CDate(dt.AddDays(-6)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
        'lblTueDate.Text = "(" & Format(CDate(dt.AddDays(-5)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
        'lblWedDate.Text = "(" & Format(CDate(dt.AddDays(-4)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
        'lblThuDate.Text = "(" & Format(CDate(dt.AddDays(-3)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
        'lblFriDate.Text = "(" & Format(CDate(dt.AddDays(-2)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
        'lblSatDate.Text = "(" & Format(CDate(dt.AddDays(-1)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
        'lblSunDate.Text = "(" & Format(CDate(dt.AddDays(0)), cultureInfo.DateTimeFormat.ShortDatePattern) & ")"
        PopulateTimesheetFromObject(weekEndingDate, "", ViewState("CandidateCode"))
        'If txtCommentsHistory.Text = "" Then
        '    trCommentHistory.Visible = False
        'Else
        '    trCommentHistory.Visible = True
        'End If

        dt = ddlWeekEnding.SelectedValue
        lblPeriodFrom.Text = Format(CDate(dt.AddDays(-6)), "dddd, MMMM d, yyyy")
        lblPeriodTo.Text = Format(dt, "dddd, MMMM d, yyyy")
        '13-08-2015|Gunnaiah| Modified for Hide manual Timesheet entry
        Dim client_details As tbl_client_info = CandidateUtility.CheckTimesheetManualEntry(cEncryption.Decrypt(Request.QueryString("eng_code")))
        'If Session("is_enable_manual_timesheet_entry") AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
        '    dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
        '    dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
        '    dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
        '    dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
        'End If
        If Not IsNothing(client_details) AndAlso Not IsNothing(client_details.is_enable_manual_timesheet_entry) AndAlso client_details.is_enable_manual_timesheet_entry AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
            dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
            dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
            dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
            dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
            hdnCalculated.Value = True
        End If
        hideControls()
    End Sub
    Private Sub hideControls()
        If txtApprovalStatus.Text = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE_FULL").ToString Then
            divComments.Visible = True
            btnSave.Visible = True
            btnReset.Visible = True
            'btnAutoFill.Visible = True
            btnDraft.Visible = True
        ElseIf txtApprovalStatus.Text = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE_FULL").ToString Then
            btnAddamendment.Visible = True
            btnSave.Visible = False
            btnReset.Visible = False
            'btnAutoFill.Visible = False
            btnDraft.Visible = False
        ElseIf txtApprovalStatus.Text = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL").ToString Then
            btnAddamendment.Visible = False
            btnSave.Visible = True
            btnAddCostCenter.Visible = True
            btnPrint.Visible = True
            btnDraft.Visible = False
        ElseIf txtApprovalStatus.Text = "" And dlExtraHours.Items.Count > 0 Then
            btnSave.Visible = True
            btnReset.Visible = True
            'btnAutoFill.Visible = True
            btnDraft.Visible = True
            divComments.Visible = True
            btnBack.Visible = True
            btnAddamendment.Visible = False
            btnAddCostCenter.Visible = True
            txtApprovalStatus.Text = "New"
        Else
            btnSave.Visible = False
            btnReset.Visible = False
            'btnAutoFill.Visible = False
            btnDraft.Visible = False
            divComments.Visible = False
            btnAddamendment.Visible = False
        End If
    End Sub
    '<summary>ClearControls: Clearing Controls</summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(26-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub ClearControls()

        'txtRegMon.Text = Nothing
        'txtRegTue.Text = Nothing
        'txtRegWed.Text = Nothing
        'txtRegThu.Text = Nothing
        'txtRegFri.Text = Nothing
        'txtRegSat.Text = Nothing
        'txtRegSun.Text = Nothing

        'txtOvrMon.Text = Nothing
        'txtOvrTue.Text = Nothing
        'txtOvrWed.Text = Nothing
        'txtOvrThu.Text = Nothing
        'txtOvrFri.Text = Nothing
        'txtOvrSat.Text = Nothing
        'txtOvrSun.Text = Nothing

        'txtHolMon.Text = Nothing
        'txtHolTue.Text = Nothing
        'txtHolWed.Text = Nothing
        'txtHolThu.Text = Nothing
        'txtHolFri.Text = Nothing
        'txtHolSat.Text = Nothing
        'txtHolSun.Text = Nothing

        'txtNotesMon.Text = Nothing
        'txtNotesTue.Text = Nothing
        'txtNotesWed.Text = Nothing
        'txtNotesThu.Text = Nothing
        'txtNotesFri.Text = Nothing
        'txtNotesSat.Text = Nothing
        'txtNotesSun.Text = Nothing

        'trCommentHistory.Visible = False
        divComments.Visible = True
        txtComments.Content = ""
        lblApprovedDate.Text = Nothing
        lblSubmitedDate.Text = Nothing
        'txtApprovalStatus.Text = "New/Save"
        txtApprovalStatus.Text = ""
        lblCurrentStatus.Text = ""
        'txtCommentsHistory.Text = ""
        'txtApprovalStatus.BackColor = Drawing.Color.White
        'btnAutoFill.Disabled = False
        btnReset.Enabled = True
        btnDraft.Enabled = True
        btnSave.Enabled = True
        'lblTotHolHours.Text = ""
        'lblTotOvrHours.Text = ""
        'lblTotalVacHrs.Text = ""
        'lblTotRegHours.Text = ""
        ViewState("timesheet_Id") = ""
    End Sub
    '<summary>UpdateTimesheet: Update the timesheet </summary>
    '<param name=”DraftOrSave”>PASSING DRAFT IF CLICK DRAFT ELSE PENDING</param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(26-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub UpdateTimesheet(ByVal DraftOrSave As String, Optional ByVal isAmendment As Boolean = False)
        Dim cultureInfo As CultureInfo = Session("localizationInfo")
        Dim myDTFI As DateTimeFormatInfo = New DateTimeFormatInfo
        myDTFI.ShortDatePattern = cultureInfo.DateTimeFormat.ShortDatePattern
        Dim loggedInUser As MembershipUser = Nothing
        Dim timesheetTypeCode As String = Nothing
        Dim timesheetStatusCode As String = Nothing
        Dim timesheetCode As String = Nothing
        Dim objGUID As New Guid(ViewState("ApproverId").ToString)
        Dim CountTimesheet As Integer = Nothing
        Dim timeCandCode As String = Nothing
        Dim engagementCode As String = Nothing
        Dim timesheetUser As String = ""
        Dim timesheetWeek As DateTime = Nothing
        'Dim monHours, tueHours, wedHours, thuHours, friHours, satHours, sunHours As Decimal
        Dim dtDetailedTimeSheet As DataTable = ViewState("dtTempTimeSheet")
        loggedInUser = Membership.GetUser()
        timesheetCode = ViewState("timesheet_Id")
        timesheetStatusCode = DraftOrSave

        timeCandCode = ViewState("LastName").Substring(0, 2) & ViewState("FirstName").Substring(0, 1) & "TS"
        timeCandCode = timeCandCode.ToUpper
        engagementCode = ddlEngmtCode.SelectedItem.Text.ToString
        timesheetWeek = CDate(ddlWeekEnding.SelectedItem.ToString)
        weekEndingDate = CDate(ddlWeekEnding.SelectedValue.ToString)
        'Initialize and opening a connection
        Dim connEmvp2 As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("emvp2").ToString() & ";Timeout=60;")
        connEmvp2.Open()
        'Transaction Begins Here
        ' There are multiple DB insertions inside this transaction.
        ' Revise this, and try to combine all the insertions into one single SProc.
        Dim transEmvp2 = connEmvp2.BeginTransaction()
        Dim transCmd As New SqlCommand()
        transCmd.Connection = connEmvp2
        transCmd.Transaction = transEmvp2
        hashCandiateEngagments = ViewState("hashCandiateEngagments")
        Try
            'Checking of Status Draft or Save
            If DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL") Then
                timesheetStatusCode = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE")
            ElseIf DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE_FULL") Then
                timesheetStatusCode = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_DRAFT_STATUS_CODE")
            End If

            If strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or _
               strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER") Then
                timesheetUser = hdnCandUserID.Value
                engagementCode = hdnEngagementCode.Value 'hashCandiateEngagments(New Guid(timesheetUser)) 'ddlCandidate.SelectedValue.ToString.Split("|")(0)
            ElseIf strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_CANDIDATE") Then
                timesheetUser = loggedInUser.ProviderUserKey.ToString
            End If


            'Getting Timesheet code(REG,OVER,HOL,VAC)
            timesheetTypeCode = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_REGULARTYPE_CODE")
            'Gets the count of Timesheet(ie, According to the count Insertion and updation is done)
            CountTimesheet = CandidateUtility.getCountTimesheetForCandidate(timesheetCode, transCmd, currentAmendmentCount)
            If Not CountTimesheet = 0 Then
                'If Count Not Eqauls Zero 
                CandidateUtility.updateTimesheetForCandidate(timesheetTypeCode, timesheetCode, _
                                 New Guid(timesheetUser), timesheetStatusCode, transCmd, Membership.GetUser.ProviderUserKey, isAmendment, currentAmendmentCount, DirectCast(dtDetailedTimeSheet, System.Data.DataTable), _
                                 ViewState("CandidateCode"), engagementCode, CDate(ddlWeekEnding.SelectedValue))
            Else
                'If Count Eqauls Zero 
                CandidateUtility.insertTimesheetForCandidate(timesheetTypeCode, timeCandCode, engagementCode, CDate(ddlWeekEnding.SelectedValue), _
                                 ViewState("CandidateCode"), timesheetStatusCode, New Guid(timesheetUser), transCmd, Membership.GetUser.ProviderUserKey, timesheetCode, DirectCast(dtDetailedTimeSheet, System.Data.DataTable))
            End If


            'Getting Timesheet code(REG,OVER,HOL,VAC)
            ' timesheetTypeCode = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_REGULARTYPE_CODE")
            'Delete the Timesheet if it doesn'have any values
            'CandidateUtility.deleteTimesheetForCandidate(timesheetTypeCode, timesheetCode, transCmd)

            ViewState("timesheet_Id_Email") = timesheetCode
            'After inserting in to Timesheet Table.Inserting into Status table...
            CandidateUtility.insertTimesheetStatus(timesheetCode, timesheetStatusCode, txtComments.Content, _
                                                   loggedInUser.ProviderUserKey, objGUID, transCmd, currentAmendmentCount)


            'lblTotRegHours.Text = txtTotalRegHrs.Value
            'lblTotOvrHours.Text = txtTotalOverHrs.Value
            'lblTotalVacHrs.Text = txtTotalVacHrs.Value
            'lblTotHolHours.Text = txtTotalHolHrs.Value
            lblTotHours.Text = txtTotalHrs.Value
            DisableControls()
            If Not Session("is_testing_mode_enabled") = True Then
                If DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL") Then
                    SendMail()
                End If
            End If
            If DraftOrSave = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL") Then
                insertAlertForAction_Timesheets()
            End If
            'MsgBox(timesheetCode)
            'MsgBox(currentAmendmentCount)


            'TO UPDATE TIMESHEET SPEND
            Dim rtWeeklyHours As String = "00:00"
            Dim otWeeklyHours As String = "00:00"
            Dim dtWeeklyHours As String = "00:00"
            Dim rtSaturdayHours As String = "00:00"
            Dim otSaturdayHours As String = "00:00"
            Dim dtSaturdayHours As String = "00:00"
            Dim rtSundayHours As String = "00:00"
            Dim otSundayHours As String = "00:00"
            Dim dtSundayHours As String = "00:00"

            Dim rtWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "WEEKDAY")
            Dim otWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "WEEKDAY")
            Dim dtWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "WEEKDAY")
            Dim rtSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "SATURDAY")
            Dim otSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "SATURDAY")
            Dim dtSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "SATURDAY")
            Dim rtSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "SUNDAY")
            Dim otSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "SUNDAY")
            Dim dtSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "SUNDAY")

            Dim rtVWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "WEEKDAY")
            Dim otVWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "WEEKDAY")
            Dim dtVWeeklyMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "WEEKDAY")
            Dim rtVSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "SATURDAY")
            Dim otVSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "SATURDAY")
            Dim dtVSaturdayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "SATURDAY")
            Dim rtVSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "SUNDAY")
            Dim otVSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "OT", "SUNDAY")
            Dim dtVSundayMarkupFactor As String = ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "DT", "SUNDAY")


            For i = 0 To dtDetailedTimeSheet.Rows.Count - 1
                rtWeeklyHours = CandidateUtility.totalTime(rtWeeklyHours, CandidateUtility.totalTime(dtDetailedTimeSheet.Rows(i).Item("regular_time_monday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_tuesday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_wednesday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_thursday"), dtDetailedTimeSheet.Rows(i).Item("regular_time_friday")))
                otWeeklyHours = CandidateUtility.totalTime(otWeeklyHours, CandidateUtility.totalTime(dtDetailedTimeSheet.Rows(i).Item("over_time_monday"), dtDetailedTimeSheet.Rows(i).Item("over_time_tuesday"), dtDetailedTimeSheet.Rows(i).Item("over_time_wednesday"), dtDetailedTimeSheet.Rows(i).Item("over_time_thursday"), dtDetailedTimeSheet.Rows(i).Item("over_time_friday")))
                dtWeeklyHours = CandidateUtility.totalTime(dtWeeklyHours, CandidateUtility.totalTime(dtDetailedTimeSheet.Rows(i).Item("double_time_monday"), dtDetailedTimeSheet.Rows(i).Item("double_time_tuesday"), dtDetailedTimeSheet.Rows(i).Item("double_time_wednesday"), dtDetailedTimeSheet.Rows(i).Item("double_time_thursday"), dtDetailedTimeSheet.Rows(i).Item("double_time_friday")))

                rtSaturdayHours = CandidateUtility.totalTime(rtSaturdayHours, dtDetailedTimeSheet.Rows(i).Item("regular_time_saturday"))
                otSaturdayHours = CandidateUtility.totalTime(otSaturdayHours, dtDetailedTimeSheet.Rows(i).Item("over_time_saturday"))
                dtSaturdayHours = CandidateUtility.totalTime(dtSaturdayHours, dtDetailedTimeSheet.Rows(i).Item("double_time_saturday"))

                rtSundayHours = CandidateUtility.totalTime(rtSundayHours, dtDetailedTimeSheet.Rows(i).Item("regular_time_sunday"))
                otSundayHours = CandidateUtility.totalTime(otSundayHours, dtDetailedTimeSheet.Rows(i).Item("over_time_sunday"))
                dtSundayHours = CandidateUtility.totalTime(dtSundayHours, dtDetailedTimeSheet.Rows(i).Item("double_time_sunday"))
            Next

            ''MsgBox(rtWeeklyHours)
            ''MsgBox(otWeeklyHours)
            ''MsgBox(dtWeeklyHours)
            ''MsgBox(getBillAmount(rtWeeklyHours, ViewState("response_std_rate"), ClientUtility.getBillingMarkupFactor(ViewState("structureID"), "RT", "WEEKDAY")))
            CandidateUtility.updateTimeSheetCosts(timesheetCode, currentAmendmentCount, CDate(ddlWeekEnding.SelectedValue), _
            rtWeeklyHours, rtWeeklyMarkupFactor, rtVWeeklyMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(rtWeeklyHours, ViewState("response_std_rate"), rtWeeklyMarkupFactor), _
            rtSaturdayHours, rtSaturdayMarkupFactor, rtVSaturdayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(rtSaturdayHours, ViewState("response_std_rate"), rtSaturdayMarkupFactor), _
            rtSundayHours, rtSundayMarkupFactor, rtVSundayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(rtSundayHours, ViewState("response_std_rate"), rtSundayMarkupFactor), _
            otWeeklyHours, otWeeklyMarkupFactor, otVWeeklyMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(otWeeklyHours, ViewState("response_std_rate"), otWeeklyMarkupFactor), _
            otSaturdayHours, otSaturdayMarkupFactor, otVSaturdayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(otSaturdayHours, ViewState("response_std_rate"), otSaturdayMarkupFactor), _
            otSundayHours, otSundayMarkupFactor, otVSundayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(otSundayHours, ViewState("response_std_rate"), otSundayMarkupFactor), _
            dtWeeklyHours, dtWeeklyMarkupFactor, dtVWeeklyMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(dtWeeklyHours, ViewState("response_std_rate"), dtWeeklyMarkupFactor), _
            dtSaturdayHours, dtSaturdayMarkupFactor, dtVSaturdayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(dtSaturdayHours, ViewState("response_std_rate"), dtSaturdayMarkupFactor), _
            dtSundayHours, dtSundayMarkupFactor, dtVSundayMarkupFactor, ViewState("response_std_rate"), CandidateUtility.getBillAmount(dtSundayHours, ViewState("response_std_rate"), dtSundayMarkupFactor), _
             CandidateUtility.totalTime(CandidateUtility.totalTime(rtWeeklyHours, otWeeklyHours, dtWeeklyHours), CandidateUtility.totalTime(rtSaturdayHours, otSaturdayHours, dtSaturdayHours), _
                                        CandidateUtility.totalTime(rtSundayHours, otSundayHours, dtSundayHours)), loggedInUser.ProviderUserKey)

            'CandidateUtility.insertTimesheetInvoiceCost(timesheetTypeCode, timesheetCode, loggedInUser.ProviderUserKey, timesheetStatusCode, transCmd, currentAmendmentCount, DirectCast(dtDetailedTimeSheet, System.Data.DataTable), _
            '                                              ViewState("CandidateCode"), engagementCode, timesheetWeek, ViewState("structureID"), ViewState("response_std_rate"))


            transEmvp2.Commit() 'Commit Transaction

        Catch ex As Exception
            transEmvp2.Rollback() 'Transaction Rollback
            Throw ex
        Finally
            CandidateUtility.checkForDeletedRows(DirectCast(ViewState("tempDeletedRows"), System.Data.DataTable))
            CandidateUtility.deleteTimesheetInvoiceCost(timesheetCode, currentAmendmentCount)
            CandidateUtility.insertNonApprovedTimesheetInvoiceCost(timesheetCode, loggedInUser.ProviderUserKey, timesheetStatusCode, currentAmendmentCount, ViewState("structureID"))
            transCmd.Dispose()
            connEmvp2.Close()
            connEmvp2.Dispose()

        End Try
    End Sub
    '<summary>SendMail: Sending Mails </summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(28-OCT-2009)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Protected Sub SendMail()
        Try
            '-----Submit Response
            Dim messageBody As String
            Dim email As New System.Net.Mail.MailMessage
            Dim smtpClient As New System.Net.Mail.SmtpClient
            Dim toMailAddress As String = Nothing
            Dim toUserId As String = Nothing
            Dim alert_message As String = Nothing
            Dim bccMailAddress As String
            Dim toClientCoordinatorEmailId As String = Nothing
            toClientCoordinatorEmailId = VMSUserUtility.getClientCoordinatorEmailIDForCompanyCode(ViewState("clientCode").ToString)

            'Send email 
            'Build the email
            If ViewState("CandEmail") IsNot Nothing And ViewState("CandEmail") <> "" Then
                email.Subject = "Requires Approval:Timesheet for " & lblCandidateName.Text & " Week ending " & CDate(ddlWeekEnding.SelectedValue).ToString("MMMM dd, yyyy")
                email.IsBodyHtml = True
                email.Body = fnMessageBody("CANDIDATE")
                bccMailAddress = ViewState("CandEmail")
                Dim client_email = ViewState("client_email_address").ToString
                '2015-06-30-Gunnaiah | Modified because of getting emails for account manager
                If Session("is_enable_marathon") Then
                    'toMailAddress = cNotification.removeHiringManager(toMailAddress, ViewState("hiring_manager_id"))
                    bccMailAddress = cNotification.removeHiringManager(bccMailAddress, ViewState("hiring_manager_id"))
                    client_email = cNotification.removeHiringManager(client_email, ViewState("hiring_manager_id"))
                End If
               
                MailUtility.sendEmail(toMailAddress, email.Subject, email.Body, bccMailAddress, "", client_email)
            End If

            If Session("is_enable_marathon") Then
                Dim Approve_Details As tbl_automated_timesheet_approver = AutomatedTimesheetAprover.getEngagementTimesheetApprover(cEncryption.Decrypt(Request.QueryString("eng_code")))
                If Not Approve_Details Is Nothing Then
                    Dim TimeSheet_Details As New tbl_timesheet_automated_approval_Detail
                    TimeSheet_Details.engagement_approver_id = Approve_Details.Id
                    TimeSheet_Details.timesheet_code = ViewState("timesheet_Id_Email")
                    TimeSheet_Details.is_active = True
                    TimeSheet_Details.is_read = False
                    TimeSheet_Details.link_text = "timesheetApprovalEmail.aspx?timesheetId=" & cEncryption.Encrypt(ViewState("timesheet_Id_Email")) & "&amendmentCount=" & cEncryption.Encrypt(currentAmendmentCount) & "&candidateId=" & cEncryption.Encrypt(ViewState("CandidateCode")) & "&Id=" & cEncryption.Encrypt(Approve_Details.timesheet_approver_user_id.ToString) & "&ClientCode=" & cEncryption.Encrypt(ViewState("clientCode").ToString)
                    TimeSheet_Details.create_timestamp = DateTime.Now
                    TimeSheet_Details.create_user_id = Membership.GetUser().ProviderUserKey
                    TimeSheet_Details.update_timestamp = DateTime.Now
                    TimeSheet_Details.update_user_id = Membership.GetUser().ProviderUserKey
                    AutomatedTimesheetAprover.SaveTimeSheetDetails(TimeSheet_Details)
                End If
            End If

            'Assemble email to Client Hiring Reps
            messageBody = fnMessageBody("CLIENT")
            email.Subject = "Requires Approval:Timesheet for " & lblCandidateName.Text & " Week ending " & CDate(ddlWeekEnding.SelectedValue).ToString("MMMM dd, yyyy")
            email.IsBodyHtml = True
            email.Body = messageBody

            toMailAddress = ViewState("ApproverEmail") & "," & ViewState("CoOrdinatorEmail")
            If Not Session("is_enable_marathon") Then
                bccMailAddress = ViewState("ApproverEmail") & "," & toClientCoordinatorEmailId & "," & ViewState("backUpTSApprover_email") & "," & ViewState("hiring_manager_email") & "," & ViewState("reporting_manager_email").ToString
                MailUtility.sendEmail(toMailAddress, email.Subject, email.Body, bccMailAddress, "", ViewState("client_email_address").ToString)
            Else
                Dim Approve_Details As tbl_automated_timesheet_approver = AutomatedTimesheetAprover.getEngagementTimesheetApprover(cEncryption.Decrypt(Request.QueryString("eng_code")))
                If Not Approve_Details Is Nothing Then
                    'bccMailAddress = Approve_Details.timesheet_approver_email_id & "," & toClientCoordinatorEmailId & "," & ViewState("backUpTSApprover_email") & "," & ViewState("hiring_manager_email") & "," & ViewState("reporting_manager_email").ToString
                    MailUtility.sendEmail(Approve_Details.timesheet_approver_email_id, email.Subject, email.Body, bccMailAddress, "", "")
                End If
            End If

            email.Body = fnMessageBody("VENDOR")
            bccMailAddress = ViewState("vendor_user_email")
            MailUtility.sendEmail(toMailAddress, email.Subject, email.Body, bccMailAddress, "", ViewState("client_email_address").ToString)

            lblMsg.Text = "Thank you. Timesheet has been sent for manager’s approval."
        Catch ex As Exception
            lblMsg.Text = ex.ToString
            'Throw ex
        Finally

        End Try
    End Sub
    Function fnMessageBody(ByVal emailReceiver As String) As String
        'Variables to hold reading the email template data
        Dim streamSubmitToVendorEmail As StreamReader
        Dim appPath As String = HttpContext.Current.Request.ApplicationPath
        Dim phyiscalPath As String = Server.MapPath(appPath)
        Dim startDate As Date = Nothing
        Dim endDate As Date = Nothing
        endDate = CDate(ddlWeekEnding.SelectedValue)
        startDate = CDate(endDate.AddDays(-6))
        'dt.AddDays((6 - firstSundayOfMonth) + 1)

        Dim emailTemplateFilePath As String = phyiscalPath & "\EmailTemplates\submitCandidateTimesheet.html"
        Dim messageBodyEdit As StringBuilder
        streamSubmitToVendorEmail = File.OpenText(emailTemplateFilePath)
        messageBodyEdit = New StringBuilder(streamSubmitToVendorEmail.ReadToEnd)
        'Now replace all the holder values with values from the database
        '13-Aug-2015|Dhandapani|New Email template 
        'messageBodyEdit.Replace("$timesheetID$", ViewState("timesheet_Id_Email"))
        messageBodyEdit.Replace("$startDate$", startDate.ToString("dddd, dd MMM yyyy"))
        messageBodyEdit.Replace("$endDate$", endDate.ToString("dddd, dd MMM yyyy"))
        'messageBodyEdit.Replace("$candidateID$", ViewState("CandidateCode"))
        messageBodyEdit.Replace("$candidateName$", lblCandidateName.Text)
        'messageBodyEdit.Replace("$clientName$", ViewState("Client"))
        If Not ViewState("work_location") = Nothing Then
            messageBodyEdit.Replace("$Loc$", ViewState("work_location"))
        Else
            messageBodyEdit.Replace("$Loc$", "N/A")
        End If
        'If Not ViewState("client_business_unit") = Nothing Then
        '    messageBodyEdit.Replace("$BU$", ViewState("client_business_unit"))
        'Else
        '    messageBodyEdit.Replace("$BU$", "N/A")
        'End If
        Dim regular_time = DirectCast(dlExtraHours.Items(0).FindControl("lblWeekTotal_RegularTime"), Label).Text
        Dim over_time = DirectCast(dlExtraHours.Items(0).FindControl("lblWeekTotal_OverTime"), Label).Text
        Dim double_time = DirectCast(dlExtraHours.Items(0).FindControl("lblWeekTotal_DoubleTime"), Label).Text
        Dim Total_Hours As String = ""
        If regular_time <> "00:00" Then
            Total_Hours = regular_time.ToString() & " Regular "
        End If
        If over_time <> "00:00" Then
            Total_Hours = Total_Hours & "," & over_time.ToString() & " OT "
        End If
        If double_time <> "00:00" Then
            Total_Hours = Total_Hours & "," & over_time.ToString() & " DT "
        End If
        If Not Total_Hours = "" Then
            messageBodyEdit.Replace("$Total_Hours$", Total_Hours)
        Else
            messageBodyEdit.Replace("$Total_Hours$", "00:00")
        End If
        Dim URL_Authority As String = Request.Url.Authority.ToString
        Dim partURL As String = ""
        Dim URL As String = ""
        If Not Request.ApplicationPath Is Nothing Then
            partURL = Request.ApplicationPath.ToString
        End If
        If emailReceiver = "CLIENT" Then
            If Not Session("is_enable_marathon") Then
                URL = "http://" + URL_Authority + partURL + "/timesheetApproval.aspx"
                URL = URL + "?timesheetId=" + cEncryption.Encrypt(ViewState("timesheet_Id")) + "&candidateId=" + cEncryption.Encrypt(ViewState("CandidateCode")) & _
                        "&amendmentCount=" + cEncryption.Encrypt(currentAmendmentCount)
                messageBodyEdit.Replace("$TS$", URL)
                messageBodyEdit.Replace("$StatusFlag$", "Click here to approve this Timesheet.")
            Else
                If Not IsNothing(ViewState("timesheet_Id_Email")) Then
                    Dim Approve_Details As tbl_timesheet_automated_approval_Detail = AutomatedTimesheetAprover.getTimeSheetDetails(ViewState("timesheet_Id_Email"))
                    If Not IsNothing(Approve_Details) Then
                        URL = "http://" + URL_Authority + partURL + "/ApproveTimesheet.aspx"
                        URL = URL + "?Id=" + cEncryption.Encrypt(Approve_Details.Id) + "&AId=" + cEncryption.Encrypt(Approve_Details.engagement_approver_id)
                        messageBodyEdit.Replace("$TS$", URL)
                        messageBodyEdit.Replace("$StatusFlag$", "Click here to approve this Timesheet.")
                    End If
                End If
            End If

        ElseIf emailReceiver = "CANDIDATE" Then
            URL = "http://" + URL_Authority + partURL + "/timesheetCandidate.aspx"
            URL = URL + "?timesheetId=" + cEncryption.Encrypt(ViewState("timesheet_Id")) & _
                        "&eng_code=" + Request.QueryString("eng_code").ToString + "&status=" + cEncryption.Encrypt(CStr(ConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE"))) + "&user=CWork"
            messageBodyEdit.Replace("$TS$", URL)
            messageBodyEdit.Replace("$StatusFlag$", "Click here to view this Timesheet.")
        ElseIf emailReceiver = "VENDOR" Then
            messageBodyEdit.Replace("$TS$", "")
            messageBodyEdit.Replace("$StatusFlag$", "")
        End If

        messageBodyEdit.Replace("$AutoGenerate$", ConfigurationManager.AppSettings("AUTOGENERATE"))
        messageBodyEdit.Replace("$AutoGenerateFooter$", ConfigurationManager.AppSettings("AUTOGENERATEFOOTER"))
        messageBodyEdit.Replace("$Disclaimer$", ConfigurationManager.AppSettings("DISCLAIMER"))

        Return messageBodyEdit.ToString()
    End Function

    Protected Sub ddlCandidate_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ddlCandidate.SelectedIndexChanged
        Dim userId As Guid = Nothing

        Dim rdrCandidateEngagement As SqlDataReader = Nothing
        Dim rdrCandidate As SqlDataReader = Nothing
        Dim engCodeCnt As Integer = Nothing
        Dim timesheetId As String = Nothing
        'Dim candUserID As String() = ddlCandidate.SelectedValue.ToString.Split("|")
        Dim objCandGUID As New Guid(ddlCandidate.SelectedValue.ToString)
        userId = objCandGUID
        ViewState("timesheet_Id") = Nothing
        Dim cultureInfo As CultureInfo = Session("localizationInfo")
        ClearControls()
        lblApprUserName.Text = "Not Available"
        lblApprUserName.Style.Value = "font-style:italic"
        weekEndingDate = CDate(ddlWeekEnding.SelectedValue)
        ViewState("status_code") = ""
        trAmendedTS.Visible = False
        divCommentsHistory.Visible = False
        dlistStatusHistory.DataSource = Nothing
        dlistStatusHistory.DataBind()

        checkForCandidateTimesheet(objCandGUID)
        'engCodeCnt = 0
        'rdrCandidateEngagement = CandidateUtility.getEngagementForCandidate(userId)
        'Try

        '    If rdrCandidateEngagement.HasRows Then
        '        Do While rdrCandidateEngagement.Read()
        '            If engCodeCnt = 0 Then
        '                ddlCandidate.SelectedItem.Text = rdrCandidateEngagement("cand_name").ToString
        '                lblManagerName.Text = rdrCandidateEngagement("timeUser").ToString
        '                ViewState("FirstName") = rdrCandidateEngagement("first_name").ToString
        '                ViewState("LastName") = rdrCandidateEngagement("last_name").ToString
        '                ViewState("CandidateCode") = rdrCandidateEngagement("candidate_code").ToString
        '                ViewState("ApproverId") = rdrCandidateEngagement("ApproverId").ToString
        '                ViewState("CandEmail") = rdrCandidateEngagement("cand_email").ToString
        '                ViewState("ApproverEmail") = rdrCandidateEngagement("appr_email").ToString
        '                ViewState("Client") = rdrCandidateEngagement("company_name").ToString
        '                ViewState("CoOrdinatorEmail") = rdrCandidateEngagement("co_email").ToString
        '                If Not rdrCandidateEngagement("co_user_id").Equals(System.DBNull.Value) Then
        '                    ViewState("CoOrdinatorUserID") = rdrCandidateEngagement("co_user_id").ToString
        '                Else
        '                    ViewState("CoOrdinatorUserID") = Nothing
        '                End If


        '                'txtApprovalStatus.Text = "New/Save"
        '                txtApprovalStatus.Visible = False
        '                'txtAppStatusHeading.Visible = False
        '            End If
        '            ddlEngmtCode.Items.Add(New ListItem(rdrCandidateEngagement("engagement_code"), rdrCandidateEngagement("engagement_code")))
        '            engCodeCnt = engCodeCnt + 1 ' Checking the count of engagements the candidate having 
        '        Loop
        '        divTimeSheet.Visible = True
        '        divNodata.Visible = False
        '        rdrCandidateEngagement.Close()
        '    Else
        '        divTimeSheet.Visible = False
        '        divNodata.Visible = True
        '        Exit Sub
        '    End If
        '    If engCodeCnt = 1 Then
        '        ddlEngmtCode.Enabled = False
        '    End If
        '    ''---Filling the Sundays of an year till the current week
        '    'Dim allSundays As ArrayList = FormUtility.getAllWeekDates(DateTime.Now.Year)
        '    'For i As Integer = allSundays.Count - 1 To 0 Step -1
        '    '    ddlWeekEnding.Items.Add(allSundays(i))
        '    'Next
        '    weekEndingDate = CDate(ddlWeekEnding.SelectedValue)

        '    If Not Request.QueryString("timesheetId") = Nothing Then
        '        timesheetId = cEncryption.Decrypt(Request.QueryString("timesheetId"))
        '        ViewState("timesheet_Id") = timesheetId
        '        PopulateTimesheetFromObject("", timesheetId)
        '        ddlWeekEnding.Enabled = False
        '    Else
        '        PopulateTimesheetFromObject(weekEndingDate, "", hdnCandUserID.Value.ToString)
        '        ddlWeekEnding.Enabled = True
        '    End If
        'Finally
        '    'rdrCandidate.Close()
        'End Try
    End Sub

    Protected Sub btnBack_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnBack.Click, btnBack1.Click
        If strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or _
             strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER") Then
            Response.Redirect("~/manageTimesheetVendor.aspx?restore=l", False)
        ElseIf strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_CANDIDATE") Then
            Response.Redirect("~/manageTimeSheets.aspx?restore=l", False)
        End If
    End Sub

    Protected Sub btnPrint_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnPrint.Click
        Session("weekDate") = ddlWeekEnding.SelectedItem.Text
        Session("date") = ddlWeekEnding.SelectedValue.ToString
        Session("candName") = lblCandidateName.Text
        Session("PosTitleName") = lblPosTitleName.Text
        Session("timeSheetApprover") = lblManagerName.Text
        Session("purchOrder") = lblPurchOrderNo.Text
        Session("GL_Account") = lblGLAccntNo.Text
        Session("engagementCode") = ddlEngmtCode.SelectedValue()
        Session("appr_status") = txtApprovalStatus.Text
        Session("clientName") = lblClientName.Text
        Session("ClientJobNo") = lblClientJobNo.Text
        Session("SubmitUserName") = lblSubmitUserName.Text
        Session("SubmitedDate") = lblSubmitedDate.Text
        Session("ApprUserName") = lblApprUserName.Text
        Session("ApprDate") = lblApprovedDate.Text
        Session("HealthCenter") = lblLocation.Text
        getDataForSaving()
        Session("dtTempTimeSheet") = ViewState("dtTempTimeSheet")
        Session("SOURCE") = ConfigurationManager.AppSettings("TIMESHEET_TYPE_HOURS")
        Session("comments") = txtComments.Content
        Session("totWeekHours") = lblTotHours.Text
        If txtApprovalStatus.Text = "APPROVED" Then
            btnSave.Visible = False
            btnDraft.Visible = False
            btnReset.Visible = False
            btnAddCostCenter.Visible = False
            btnBack.Visible = True
            'If txtCommentsHistory.Text = "" Then
            '    trCommentHistory.Visible = False
            'End If
            If txtComments.Content = "" Then
                divComments.Visible = False
            End If
        End If
        Dim url As String
        If Not Request.QueryString("timesheetId") Is Nothing Then
            url = "timesheetCandidatePrint.aspx?timesheetId=" + Request.QueryString("timesheetId")
        Else
            url = "timesheetCandidatePrint.aspx"
        End If

        ScriptManager.RegisterClientScriptBlock(Me.UpdatePanel1, Me.UpdatePanel1.GetType(), "popUpWindowPrint", _
                      "window.open('" + url + "','PrintWindow','top=50, left=10, height=600, width=1000, status=no, menubar=no, resizable=no, scrollbars=yes, toolbar=no, location=no, directories=no');", True)

    End Sub

    Protected Sub btnAddamendment_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAddamendment.Click
        If hdnCostCenterCount.Value = 0 Then
            lblMsgNoTimesheet.Visible = True
            dlExtraHours.DataSource = Nothing
            dlExtraHours.DataBind()
        Else
            hdnCalculated.Value = "False"
            createDataTable()
            ViewState("status_code") = ""
            Dim newRow As DataRow = dtTempTimeSheet.NewRow()
            newRow.Item(0) = " "
            newRow.Item(1) = Convert.ToInt32(ViewState("cost_center_id"))
            newRow.Item(2) = Convert.ToInt32(ViewState("business_unit_id"))
            For i = 3 To 30
                newRow.Item(i) = "00:00"
            Next
            dtTempTimeSheet.Rows.Add(newRow)
            ViewState("dtTempTimeSheet") = dtTempTimeSheet
            dlExtraHours.DataSource = Nothing
            dlExtraHours.DataSource = dtTempTimeSheet
            dlExtraHours.DataBind()
        End If
        UpdatePanel1.Update()

        timeSheetCode = ViewState("timesheetId").ToString
        txtComments.Visible = True
        txtComments.Enabled = True

        addAmendment = True
        ViewState("addAmendment") = addAmendment
        ddlEngmtCode.Enabled = False
        ddlCandidate.Enabled = False
        btnAddamendment.Enabled = False
        btnReset.Visible = True
        btnReset.Enabled = True
        btnDraft.Visible = True
        btnDraft.Enabled = True
        btnSave.Visible = True
        btnSave.Enabled = True
        btnBack.Visible = True
        btnBack.Enabled = True
        btnAddCostCenter.Visible = True
        txtApprovalStatus.Text = ""
        'txtApprovalStatus.BackColor = Drawing.Color.White
        lblApprovedDate.Text = ""
        lblApprUserName.Text = ""
        lblCurrentStatus.Text = ""
        dlistStatusHistory.DataSource = Nothing
        dlistStatusHistory.DataBind()
        divCommentsHistory.Visible = False
        divComments.Visible = True
        fillTimeSheetsGrid(timeSheetCode, True)
    End Sub

    Protected Sub gvwTimesheetDetails_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles gvwTimesheetDetails.RowCommand
        'Dim row As System.Web.UI.WebControls.GridViewRowEventArgs
        Dim count As Integer = 0
        If e.CommandName = "FillTimeSheetDetails" Then
            dtTimeSheetData = Session("timeSheetData")
            'timesheetId = cEncryption.Decrypt(Request.QueryString("timesheetId"))
            Dim dvMaxCount As DataView = dtTimeSheetData.DefaultView
            Dim ID As Integer = Convert.ToInt32(e.CommandArgument.ToString())
            ViewState("amendmentCount") = ID
            ViewState("timeSheetGridHasData") = True
            If ID = 0 Then
                ViewState("originalTimeSheet") = True
            End If
            dvMaxCount.RowFilter = "amendment_count = " & ID
            If gvwTimesheetDetails.Rows.Count = 1 Then
                timesheetId = dvMaxCount.Item(0).Row(0).ToString
                ViewState("timesheetId") = timesheetId
                PopulateTimesheetFromObject("", timesheetId)
                trAmendedTS.Visible = False
                btnAddamendment.Visible = True
                btnAddamendment.Enabled = True
                Exit Sub
            End If
            Do While count < gvwTimesheetDetails.Rows.Count
                If count = e.CommandArgument Then
                    gvwTimesheetDetails.Rows(count).Font.Italic = True
                    gvwTimesheetDetails.Rows(count).BorderColor = Drawing.Color.DarkRed
                Else
                    gvwTimesheetDetails.Rows(count).Font.Italic = False
                    gvwTimesheetDetails.Rows(count).BorderColor = Drawing.Color.Empty

                End If
                count = count + 1
            Loop
            fillTimeSheetData(dvMaxCount.ToTable().Rows, ViewState("timesheetId"))
            PopulateTimesheetFromObject(ddlWeekEnding.SelectedValue, "", ViewState("CandidateCode"))
        End If

        If ViewState("current_approval_status_code") = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE") Then
            btnAddamendment.Visible = True
            btnAddamendment.Enabled = True
        End If
        If Not Request.QueryString("timesheetId") Is Nothing Then
            ddlWeekEnding.Enabled = False
        End If

    End Sub

    Protected Sub selBusinessUnit_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles selBusinessUnit.SelectedIndexChanged
        tvCostCenter.Nodes.Clear()
        'trCostCenterHeading.Style.Value = "display:none;"
        populateTreeview(selBusinessUnit.SelectedValue, tvCostCenter.Nodes)
        Dim tn As New TreeNode()
        tn.Text = ConfigurationManager.AppSettings("NO_COST_CENTER_ATTACHED_TEXT").ToString
        tn.Value = ConfigurationManager.AppSettings("NO_COST_CENTER_ATTACHED_VALUE").ToString
        tvCostCenter.Nodes.Add(tn)
        tn.PopulateOnDemand = False
    End Sub
    Private Sub populateTreeview(ByVal BuID As String, ByVal nodes As TreeNodeCollection, Optional ByVal parentid As String = "")
        Dim rdrCostCenters As SqlDataReader = Nothing
        rdrCostCenters = ClientUserUtility.fillCostCenterTreeview(BuID, parentid)
        Try
            Do While rdrCostCenters.Read()
                Dim tn As New TreeNode()
                tn.Text = rdrCostCenters("cost_center_name").ToString()
                tn.Value = rdrCostCenters("client_cost_center_id").ToString()
                nodes.Add(tn)
                tn.PopulateOnDemand = (CInt(rdrCostCenters("child_count")) > 0)

                'ddlParentCostCenter.Items.Add(New ListItem(rdrParentCostCenter("cost_center_name"), rdrParentCostCenter("client_cost_center_id").ToString))
            Loop
        Finally
            If Not rdrCostCenters.IsClosed Then
                rdrCostCenters.Close()
            End If
            rdrCostCenters = Nothing
        End Try
    End Sub
    Private Sub populateTreeviewSubLevel(ByVal parentid As Integer, ByVal parentNode As TreeNode)
        populateTreeview(selBusinessUnit.SelectedValue, parentNode.ChildNodes, parentid)
    End Sub

    Protected Sub tvCostCenter_SelectedNodeChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles tvCostCenter.SelectedNodeChanged
        'trCostCenterHeading.Style.Value = "display:inline;"
        hdnBUCostCenter.Value = selBusinessUnit.SelectedValue.ToString + "|" + tvCostCenter.SelectedNode.Value
        ViewState("BUCostCenter") = selBusinessUnit.SelectedValue.ToString + "|" + tvCostCenter.SelectedNode.Value
        lblCostCentreName.Visible = True
        lblCostCentreNameHeading.Visible = True
        lblCostCentreName.Text = selBusinessUnit.SelectedItem.Text + "|" + tvCostCenter.SelectedNode.Text
        'btnSubmit.Style.Value = "display:inline"
        lblCostCentreName.ForeColor = Drawing.Color.Black
        'mdlPopup1.Hide()
        ViewState("pageLoad") = False
        Dim column As New DataColumn
        Dim rowTimeEntries As DataRow
        Dim overTime As String = "00:00"
        getDataForSaving()
        If Not ViewState("dtTempTimeSheet") Is Nothing Then
            dtTempTimeSheet = ViewState("dtTempTimeSheet")
        Else
            createDataTable()
        End If
        If dlExtraHours.Items.Count = 0 Then
            ViewState("business_unit_id") = selBusinessUnit.SelectedValue.ToString
            ViewState("cost_center_id") = tvCostCenter.SelectedValue.ToString
            ViewState("cost_center_name") = selBusinessUnit.SelectedItem.Text + "|" + tvCostCenter.SelectedNode.Text
            hdnCalculated.Value = "False"
        End If

        If Not dtTempTimeSheet.Select("cost_center_id = '" & tvCostCenter.SelectedValue & "'").Count > 0 Then

            lblCostCentreName.ForeColor = Drawing.Color.Black
            rowTimeEntries = dtTempTimeSheet.NewRow()
            rowTimeEntries.Item("cost_center_name") = selBusinessUnit.SelectedItem.Text + "|" + tvCostCenter.SelectedNode.Text
            rowTimeEntries.Item("cost_center_id") = tvCostCenter.SelectedValue.ToString
            rowTimeEntries.Item("business_unit_id") = Convert.ToInt32(selBusinessUnit.SelectedValue)
            For i = 3 To 30
                rowTimeEntries.Item(i) = "00:00"
            Next
            rowTimeEntries.Item("cost_center_display_order") = dtTempTimeSheet.Rows.Count + 1
            dtTempTimeSheet.Rows.Add(rowTimeEntries)

            dlExtraHours.DataSource = Nothing
            dlExtraHours.DataSource = dtTempTimeSheet
            ViewState("dtTempTimeSheet") = dtTempTimeSheet
            dlExtraHours.DataBind()
            UpdatePanel1.Update()
            ' mdlPopup1.Hide()
            '22-sept-2015|Gangadhar | Closing the HideMessageRadwindow  
            ScriptManager.RegisterStartupScript(Me, Me.GetType(), Guid.NewGuid().ToString(), "HideMessageRadwindow();", True)
            lblMsgNoTimesheet.Visible = False
            If dlExtraHours.Items.Count > 1 Then
                hdnCalculated.Value = "True"
            End If
        Else
            lblCostCentreName.Text = "This cost center has already been selected once. Please choose another."
            lblCostCentreName.ForeColor = Drawing.Color.Red
        End If
        EnableControls()
        '13-08-2015|Gunnaiah| Modified for Hide manual Timesheet entry
        Dim client_details As tbl_client_info = CandidateUtility.CheckTimesheetManualEntry(cEncryption.Decrypt(Request.QueryString("eng_code")))
        'If Session("is_enable_manual_timesheet_entry") AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
        '    dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
        '    dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
        '    dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
        '    dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
        'End If
        If Not IsNothing(client_details) AndAlso Not IsNothing(client_details.is_enable_manual_timesheet_entry) AndAlso client_details.is_enable_manual_timesheet_entry AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
            dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
            dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
            dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
            dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
            hdnCalculated.Value = True
        End If
    End Sub

    Protected Sub tvCostCenter_TreeNodePopulate(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.TreeNodeEventArgs) Handles tvCostCenter.TreeNodePopulate
        populateTreeviewSubLevel(CInt(e.Node.Value), e.Node)
    End Sub
    '<summary>tempDataTable: Create the temporary table to store the timeSheet Entries</summary>
    '<param name=” ”></param>
    '<returns>NOTHING</param>
    '<author>RGBSI</author>
    '<creationDate>(23-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub tempDataTable()
        tempTime_Table = New DataTable
        tempTime_Table.Columns.Add(New DataColumn("cost_center_name", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("cost_center_id", GetType(Int32)))
        tempTime_Table.Columns.Add(New DataColumn("business_unit_id", GetType(Int32)))

        tempTime_Table.Columns.Add(New DataColumn("regular_time_monday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("regular_time_tuesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("regular_time_wednesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("regular_time_thursday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("regular_time_friday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("regular_time_saturday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("regular_time_sunday", GetType(String)))

        tempTime_Table.Columns.Add(New DataColumn("over_time_monday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("over_time_tuesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("over_time_wednesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("over_time_thursday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("over_time_friday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("over_time_saturday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("over_time_sunday", GetType(String)))

        tempTime_Table.Columns.Add(New DataColumn("double_time_monday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("double_time_tuesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("double_time_wednesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("double_time_thursday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("double_time_friday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("double_time_saturday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("double_time_sunday", GetType(String)))


        tempTime_Table.Columns.Add(New DataColumn("time_monday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("time_tuesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("time_wednesday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("time_thursday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("time_friday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("time_saturday", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("time_sunday", GetType(String)))

        tempTime_Table.Columns.Add(New DataColumn("time_weekTotal", GetType(String)))
        tempTime_Table.Columns.Add(New DataColumn("cost_center_display_order", GetType(Integer)))

    End Sub
    '<summary>createDataTable: Create the temporary table to store the timeSheet Entries</summary>
    '<param name=” ”></param>
    '<returns>NOTHING</param>
    '<author>RGBSI</author>
    '<creationDate>(23-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>

    Private Sub createDataTable()
        Dim column As New DataColumn
        dtTempTimeSheet.Columns.Clear()
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "cost_center_name"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.Int32")
        column.ColumnName = "cost_center_id"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.Int32")
        column.ColumnName = "business_unit_id"
        dtTempTimeSheet.Columns.Add(column)

        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "regular_time_monday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "regular_time_tuesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "regular_time_wednesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "regular_time_thursday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "regular_time_friday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "regular_time_saturday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "regular_time_sunday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)


        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "over_time_monday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "over_time_tuesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "over_time_wednesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "over_time_thursday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "over_time_friday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "over_time_saturday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "over_time_sunday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)

        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "double_time_monday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "double_time_tuesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "double_time_wednesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "double_time_thursday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "double_time_friday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "double_time_saturday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "double_time_sunday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)

        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_monday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_tuesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_wednesday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_thursday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_friday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_saturday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_sunday"
        column.DefaultValue = "00:00"
        dtTempTimeSheet.Columns.Add(column)


        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "mon_units"
        'column.DefaultValue = "0"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "tue_units"
        'column.DefaultValue = "0"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "wed_units"
        'column.DefaultValue = "0"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "thu_units"
        'column.DefaultValue = "0"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "fri_units"
        'column.DefaultValue = "0"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "sat_units"
        'column.DefaultValue = "0"
        dtTempTimeSheet.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "sun_units"
        'column.DefaultValue = "0"
        dtTempTimeSheet.Columns.Add(column)


        column = New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "time_weekTotal"
        dtTempTimeSheet.Columns.Add(column)

        column = New DataColumn
        column.DataType = System.Type.GetType("System.Int32")
        column.ColumnName = "cost_center_display_order"
        dtTempTimeSheet.Columns.Add(column)

    End Sub

    '<summary>btnSubmit_Click: Submits the selected Business Unit and Cost Centre</summary>
    '<param name=” ”></param>
    '<returns>NOTHING</param>
    '<author>RGBSI</author>
    '<creationDate>(19-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    'Protected Sub btnSubmit_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSubmit.Click
    '    Dim column As New DataColumn
    '    Dim rowTimeEntries As DataRow
    '    Dim overTime As String = "00:00"
    '    getDataForSaving()
    '    If Not ViewState("dtTempTimeSheet") Is Nothing Then
    '        dtTempTimeSheet = ViewState("dtTempTimeSheet")
    '    Else
    '        createDataTable()
    '    End If
    '    If Not dtTempTimeSheet.Select("cost_center_id = '" & tvCostCenter.SelectedValue & "'").Count > 0 Then
    '        lblCostCentreName.ForeColor = Drawing.Color.Black
    '        rowTimeEntries = dtTempTimeSheet.NewRow()
    '        rowTimeEntries.Item("cost_center_name") = selBusinessUnit.SelectedItem.Text + "|" + tvCostCenter.SelectedNode.Text
    '        rowTimeEntries.Item("cost_center_id") = tvCostCenter.SelectedValue.ToString
    '        rowTimeEntries.Item("business_unit_id") = Convert.ToInt32(selBusinessUnit.SelectedValue)
    '        For i = 3 To 30
    '            rowTimeEntries.Item(i) = "00:00"
    '        Next
    '        dtTempTimeSheet.Rows.Add(rowTimeEntries)

    '        dlExtraHours.DataSource = Nothing
    '        dlExtraHours.DataSource = dtTempTimeSheet
    '        ViewState("dtTempTimeSheet") = dtTempTimeSheet
    '        dlExtraHours.DataBind()
    '        UpdatePanel1.Update()
    '        mdlPopup1.Hide()

    '    Else
    '        lblCostCentreName.Text = "This cost center has already been selected once. Please choose another."
    '        lblCostCentreName.ForeColor = Drawing.Color.Red
    '    End If
    'End Sub

    '<summary>bindData: Binds the dataList,dlExtraHours with the updated data from the temporary table </summary>
    '<param name=” ”></param>
    '<returns>NOTHING</param>
    '<author>RGBSI</author>
    '<creationDate>(19-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub bindData()
        dtTempTimeSheet = ViewState("dtTempTimeSheet")
        dlExtraHours.DataSource = Nothing
        dlExtraHours.DataSource = dtTempTimeSheet
        dlExtraHours.DataBind()
        UpdatePanel1.Update()
    End Sub

    'Protected Sub dlExtraHours_EditCommand(ByVal source As Object, ByVal e As System.Web.UI.WebControls.DataListCommandEventArgs) Handles dlExtraHours.EditCommand
    '    dlExtraHours.EditItemIndex = e.Item.ItemIndex
    '    bindData()
    '    'If e.CommandName = "Edit" Then
    '    '    Dim lblWeekTotal As Label = e.Item.FindControl("lblWeekTotal")
    '    '    Dim lblMonday As TextBox = e.Item.FindControl("lblMonday")
    '    '    Dim lblTuesday As TextBox = e.Item.FindControl("lblTuesday")
    '    '    Dim lblWednesday As TextBox = e.Item.FindControl("lblWednesday")
    '    '    Dim lblThursday As TextBox = e.Item.FindControl("lblThursday")
    '    '    Dim lblFriday As TextBox = e.Item.FindControl("lblFriday")
    '    '    Dim lblSaturday As TextBox = e.Item.FindControl("lblSaturday")
    '    '    Dim lblSunday As TextBox = e.Item.FindControl("lblSunday")
    '    '    lblWeekTotal.Text = totalTime(lblMonday.Text, lblTuesday.Text, lblWednesday.Text, lblThursday.Text, lblFriday.Text, lblSaturday.Text, lblSunday.Text)

    '    'End If
    'End Sub


    Protected Sub dlExtraHours_ItemDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.DataListItemEventArgs) Handles dlExtraHours.ItemDataBound
        Dim cultureInfo As CultureInfo = Session("localizationInfo")

        If Not e.Item.ItemType = ListItemType.Header And Not e.Item.ItemType = ListItemType.Footer _
           And Not e.Item.ItemType = ListItemType.EditItem Then
            'Dim lblWeekTotal As Label = e.Item.FindControl("lblWeekTotal")




            Dim monHrs As RadTimePicker = e.Item.FindControl("lblMonday")
            Dim tueHrs As RadTimePicker = e.Item.FindControl("lblTuesday")
            Dim wedHrs As RadTimePicker = e.Item.FindControl("lblWednesday")
            Dim thuHrs As RadTimePicker = e.Item.FindControl("lblThursday")
            Dim friHrs As RadTimePicker = e.Item.FindControl("lblFriday")
            Dim satHrs As RadTimePicker = e.Item.FindControl("lblSaturday")
            Dim sunHrs As RadTimePicker = e.Item.FindControl("lblSunday")

            Dim monReg As TextBox = e.Item.FindControl("lblMondayRegularTime")
            Dim tueReg As TextBox = e.Item.FindControl("lblTuesdayRegularTime")
            Dim wedReg As TextBox = e.Item.FindControl("lblWednesdayRegularTime")
            Dim thuReg As TextBox = e.Item.FindControl("lblThursdayRegularTime")
            Dim friReg As TextBox = e.Item.FindControl("lblFridayRegularTime")
            Dim satReg As TextBox = e.Item.FindControl("lblSaturdayRegularTime")
            Dim sunReg As TextBox = e.Item.FindControl("lblSundayRegularTime")

            Dim monOvr As TextBox = e.Item.FindControl("lblMondayOverTime")
            Dim tueOvr As TextBox = e.Item.FindControl("lblTuesdayOverTime")
            Dim wedOvr As TextBox = e.Item.FindControl("lblWednesdayOverTime")
            Dim thuOvr As TextBox = e.Item.FindControl("lblThursdayOverTime")
            Dim friOvr As TextBox = e.Item.FindControl("lblFridayOverTime")
            Dim satOvr As TextBox = e.Item.FindControl("lblSaturdayOverTime")
            Dim sunOvr As TextBox = e.Item.FindControl("lblSundayOverTime")

            Dim monHol As TextBox = e.Item.FindControl("lblMondayHolidayTime")
            Dim tueHol As TextBox = e.Item.FindControl("lblTuesdayHolidayTime")
            Dim wedHol As TextBox = e.Item.FindControl("lblWednesdayHolidayTime")
            Dim thuHol As TextBox = e.Item.FindControl("lblThursdayHolidayTime")
            Dim friHol As TextBox = e.Item.FindControl("lblFridayHolidayTime")
            Dim satHol As TextBox = e.Item.FindControl("lblSaturdayHolidayTime")
            Dim sunHol As TextBox = e.Item.FindControl("lblSundayHolidayTime")


            Dim txtMonUnits As TextBox = e.Item.FindControl("txtMonUnits")
            Dim txtTueUnits As TextBox = e.Item.FindControl("txtTueUnits")
            Dim txtWedUnits As TextBox = e.Item.FindControl("txtWedUnits")
            Dim txtThuUnits As TextBox = e.Item.FindControl("txtThuUnits")
            Dim txtFriUnits As TextBox = e.Item.FindControl("txtFriUnits")
            Dim txtSatUnits As TextBox = e.Item.FindControl("txtSatUnits")
            Dim txtSunUnits As TextBox = e.Item.FindControl("txtSunUnits")


            Dim lnkCostCentre As Label = e.Item.FindControl("lnkCostCentre")
            Dim lnkAddRegTime As LinkButton = e.Item.FindControl("lnkAddRegTime")
            Dim lnkAddOverTime As LinkButton = e.Item.FindControl("lnkAddOverTime")
            Dim lnkAddHolidayTime As LinkButton = e.Item.FindControl("lnkAddHolidayTime")
            Dim rowRegularHours As HtmlTableRow = e.Item.FindControl("rowRegularHours")
            Dim rowRegularTimeHours As HtmlTableRow = e.Item.FindControl("rowRegularTimeHours")
            Dim rowOverTimeHours As HtmlTableRow = e.Item.FindControl("rowOverTimeHours")
            Dim rowHolidayTimeHours As HtmlTableRow = e.Item.FindControl("rowHolidayTimeHours")
            Dim btnCalculate As ImageButton = e.Item.FindControl("btnCalculate")
            Dim lblWeekTotal_RegularTime As Label = e.Item.FindControl("lblWeekTotal_RegularTime")
            Dim lblWeekTotal_OverTime As Label = e.Item.FindControl("lblWeekTotal_OverTime")
            Dim lblWeekTotal_DoubleTime As Label = e.Item.FindControl("lblWeekTotal_DoubleTime")
            Dim lblCostCentreName As Label = e.Item.FindControl("lblCostCentreName")
            Dim btnRemoveCostCentre As ImageButton = e.Item.FindControl("btnRemoveCostCentre")
            Dim trTblHeader As HtmlTableRow = e.Item.FindControl("trTblHeader")
            Dim lblMonDate As Label = e.Item.FindControl("lblMonDate")
            Dim lblTueDate As Label = e.Item.FindControl("lblTueDate")
            Dim lblWedDate As Label = e.Item.FindControl("lblWedDate")
            Dim lblThuDate As Label = e.Item.FindControl("lblThuDate")
            Dim lblFriDate As Label = e.Item.FindControl("lblFriDate")
            Dim lblSatDate As Label = e.Item.FindControl("lblSatDate")
            Dim lblSunDate As Label = e.Item.FindControl("lblSunDate")

            Dim trUnits As HtmlTableRow = e.Item.FindControl("trUnits")
            Dim lblUnits As Label = e.Item.FindControl("lblUnits")

            trUnits.Visible = Session("is_timesheet_unit_enabled")
            lblUnits.Text = Session("timesheet_unit_name")

            If newWeekEndingDate IsNot Nothing And newWeekEndingDate <> "" Then
                dt = newWeekEndingDate
            Else
                dt = ddlWeekEnding.SelectedValue
            End If

            lblMonDate.Text = Format(CDate(dt.AddDays(-6)), "dd/MMM")
            lblTueDate.Text = Format(CDate(dt.AddDays(-5)), "dd/MMM")
            lblWedDate.Text = Format(CDate(dt.AddDays(-4)), "dd/MMM")
            lblThuDate.Text = Format(CDate(dt.AddDays(-3)), "dd/MMM")
            lblFriDate.Text = Format(CDate(dt.AddDays(-2)), "dd/MMM")
            lblSatDate.Text = Format(CDate(dt.AddDays(-1)), "dd/MMM")
            lblSunDate.Text = Format(CDate(dt.AddDays(0)), "dd/MMM")

            If (CDate(ViewState("end_date")) < CDate(dt.AddDays(-6))) Or (CDate(ViewState("start_date")) > CDate(dt.AddDays(-6))) Then
                blnAllowMonday = False
            End If
            If (CDate(ViewState("end_date")) < CDate(dt.AddDays(-5))) Or (CDate(ViewState("start_date")) > CDate(dt.AddDays(-5))) Then
                blnAllowTuesday = False
            End If
            If (CDate(ViewState("end_date")) < CDate(dt.AddDays(-4))) Or (CDate(ViewState("start_date")) > CDate(dt.AddDays(-4))) Then
                blnAllowWednesday = False
            End If
            If (CDate(ViewState("end_date")) < CDate(dt.AddDays(-3))) Or (CDate(ViewState("start_date")) > CDate(dt.AddDays(-3))) Then
                blnAllowThursday = False
            End If
            If (CDate(ViewState("end_date")) < CDate(dt.AddDays(-2))) Or (CDate(ViewState("start_date")) > CDate(dt.AddDays(-2))) Then
                blnAllowFriday = False
            End If
            If (CDate(ViewState("end_date")) < CDate(dt.AddDays(-1))) Or (CDate(ViewState("start_date")) > CDate(dt.AddDays(-1))) Then
                blnAllowSaturday = False
            End If
            If (CDate(ViewState("end_date")) < CDate(dt.AddDays(0))) Or (CDate(ViewState("start_date")) > CDate(dt.AddDays(0))) Then
                blnAllowSunday = False
            End If

            rowRegularTimeHours.Visible = False
            rowHolidayTimeHours.Visible = False
            rowOverTimeHours.Visible = False

            If ViewState("status_code") = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE") And _
                hdnIsNewTimesheet.Value = False Then
                btnRemoveCostCentre.Visible = False
            Else
                If e.Item.ItemIndex = 0 Then
                    'lnkCostCentre.Text = ViewState("cost_center_name").ToString
                    btnRemoveCostCentre.Visible = True
                Else
                    btnRemoveCostCentre.Visible = True
                End If
            End If

            Dim tempTimeSheet As DataTable = ViewState("dtTempTimeSheet")
            If Not tempTimeSheet Is Nothing Then
                If tempTimeSheet.Rows.Count > 1 Then
                    btnCalculate.Visible = False
                    monHrs.Enabled = False
                    tueHrs.Enabled = False
                    wedHrs.Enabled = False
                    thuHrs.Enabled = False
                    friHrs.Enabled = False
                    satHrs.Enabled = False
                    sunHrs.Enabled = False
                End If
            End If
            If (monReg.Text <> "" And monReg.Text <> "00:00") Or (tueReg.Text <> "" And tueReg.Text <> "00:00") Or _
                (wedReg.Text <> "" And wedReg.Text <> "00:00") Or (thuReg.Text <> "" And thuReg.Text <> "00:00") Or _
                (friReg.Text <> "" And friReg.Text <> "00:00") Or (satReg.Text <> "" And satReg.Text <> "00:00") Or _
                (sunReg.Text <> "" And sunReg.Text <> "00:00") Then
                rowRegularTimeHours.Visible = True
                hdnCalculated.Value = "True"
                lnkAddRegTime.Visible = False
            End If
            If (monOvr.Text <> "" And monOvr.Text <> "00:00") Or (tueOvr.Text <> "" And tueOvr.Text <> "00:00") Or _
                (wedOvr.Text <> "" And wedOvr.Text <> "00:00") Or (thuOvr.Text <> "" And thuOvr.Text <> "00:00") Or _
                (friOvr.Text <> "" And friOvr.Text <> "00:00") Or (satOvr.Text <> "" And satOvr.Text <> "00:00") Or _
                (sunOvr.Text <> "" And sunOvr.Text <> "00:00") Then
                rowOverTimeHours.Visible = True
                hdnCalculated.Value = "True"
                lnkAddOverTime.Visible = False
            End If
            If (monHol.Text <> "" And monHol.Text <> "00:00") Or (tueHol.Text <> "" And tueHol.Text <> "00:00") Or _
                (wedHol.Text <> "" And wedHol.Text <> "00:00") Or (thuHol.Text <> "" And thuHol.Text <> "00:00") Or _
                (friHol.Text <> "" And friHol.Text <> "00:00") Or (satHol.Text <> "" And satHol.Text <> "00:00") Or _
                (sunHol.Text <> "" And sunHol.Text <> "00:00") Then
                rowHolidayTimeHours.Visible = True
                hdnCalculated.Value = "True"
                lnkAddHolidayTime.Visible = False
            End If

            If ViewState("status_code") = WebConfigurationManager.AppSettings("APPLICATION_TIMESHEET_APPROVED_STATUS_CODE") And _
                hdnIsNewTimesheet.Value = False Then
                btnCalculate.Visible = False

                monHrs.Enabled = False
                tueHrs.Enabled = False
                wedHrs.Enabled = False
                thuHrs.Enabled = False
                friHrs.Enabled = False
                satHrs.Enabled = False
                sunHrs.Enabled = False

                monReg.ReadOnly = True
                tueReg.ReadOnly = True
                wedReg.ReadOnly = True
                thuReg.ReadOnly = True
                friReg.ReadOnly = True
                satReg.ReadOnly = True
                sunReg.ReadOnly = True

                monOvr.ReadOnly = True
                tueOvr.ReadOnly = True
                wedOvr.ReadOnly = True
                thuOvr.ReadOnly = True
                friOvr.ReadOnly = True
                satOvr.ReadOnly = True
                sunOvr.ReadOnly = True

                monHol.ReadOnly = True
                tueHol.ReadOnly = True
                wedHol.ReadOnly = True
                thuHol.ReadOnly = True
                friHol.ReadOnly = True
                satHol.ReadOnly = True
                sunHol.ReadOnly = True

                txtMonUnits.ReadOnly = True
                txtTueUnits.ReadOnly = True
                txtWedUnits.ReadOnly = True
                txtThuUnits.ReadOnly = True
                txtFriUnits.ReadOnly = True
                txtSatUnits.ReadOnly = True
                txtSunUnits.ReadOnly = True


                lnkAddRegTime.Visible = False
                lnkAddOverTime.Visible = False
                lnkAddHolidayTime.Visible = False
            End If

            If Not e.Item.ItemIndex = 0 Then
                rowRegularHours.Visible = False
                rowRegularTimeHours.Visible = True
                rowHolidayTimeHours.Visible = True
                rowOverTimeHours.Visible = True
            End If
            If Not blnAllowMonday Then
                disableControlForDays(monHrs, monReg, monOvr, monHol, txtMonUnits)
            End If
            If Not blnAllowTuesday Then
                disableControlForDays(tueHrs, tueReg, tueOvr, tueHol, txtTueUnits)
            End If
            If Not blnAllowWednesday Then
                disableControlForDays(wedHrs, wedReg, wedOvr, wedHol, txtWedUnits)
            End If
            If Not blnAllowThursday Then
                disableControlForDays(thuHrs, thuReg, thuOvr, thuHol, txtThuUnits)
            End If
            If Not blnAllowFriday Then
                disableControlForDays(friHrs, friReg, friOvr, friHol, txtFriUnits)
            End If
            If Not blnAllowSaturday Then
                disableControlForDays(satHrs, satReg, satOvr, satHol, txtSatUnits)
            End If
            If Not blnAllowSunday Then
                disableControlForDays(sunHrs, sunReg, sunOvr, sunHol, txtSunUnits)
            End If

            ViewState("lblMonday") = CandidateUtility.totalTime(monReg.Text, monOvr.Text, monHol.Text, ViewState("lblMonday").ToString)
            ViewState("lblTuesday") = CandidateUtility.totalTime(tueReg.Text, tueOvr.Text, tueHol.Text, ViewState("lblTuesday").ToString)
            ViewState("lblWednesday") = CandidateUtility.totalTime(wedReg.Text, wedOvr.Text, wedHol.Text, ViewState("lblWednesday").ToString)
            ViewState("lblThursday") = CandidateUtility.totalTime(thuReg.Text, thuOvr.Text, thuHol.Text, ViewState("lblThursday"))
            ViewState("lblFriday") = CandidateUtility.totalTime(friReg.Text, friOvr.Text, friHol.Text, ViewState("lblFriday"))
            ViewState("lblSaturday") = CandidateUtility.totalTime(satReg.Text, satOvr.Text, satHol.Text, ViewState("lblSaturday"))
            ViewState("lblSunday") = CandidateUtility.totalTime(sunReg.Text, sunOvr.Text, sunHol.Text, ViewState("lblSunday"))
            lblTotHours.Text = CandidateUtility.totalTime(ViewState("lblMonday"), ViewState("lblTuesday"), ViewState("lblWednesday"), ViewState("lblThursday"), ViewState("lblFriday"), ViewState("lblSaturday"), ViewState("lblSunday"))

            monHrs.SelectedTime = CDate(CandidateUtility.totalTime(monReg.Text, monOvr.Text, monHol.Text)).TimeOfDay
            tueHrs.SelectedTime = CDate(CandidateUtility.totalTime(tueReg.Text, tueOvr.Text, tueHol.Text)).TimeOfDay
            wedHrs.SelectedTime = CDate(CandidateUtility.totalTime(wedReg.Text, wedOvr.Text, wedHol.Text)).TimeOfDay
            thuHrs.SelectedTime = CDate(CandidateUtility.totalTime(thuReg.Text, thuOvr.Text, thuHol.Text)).TimeOfDay
            friHrs.SelectedTime = CDate(CandidateUtility.totalTime(friReg.Text, friOvr.Text, friHol.Text)).TimeOfDay
            satHrs.SelectedTime = CDate(CandidateUtility.totalTime(satReg.Text, satOvr.Text, satHol.Text)).TimeOfDay
            sunHrs.SelectedTime = CDate(CandidateUtility.totalTime(sunReg.Text, sunOvr.Text, sunHol.Text)).TimeOfDay
            'lblWeekTotal.Text = totalTime(monHrs.Text, tueHrs.Text, wedHrs.Text, thuHrs.Text, friHrs.Text, satHrs.Text, sunHrs.Text)
            lblWeekTotal_RegularTime.Text = CandidateUtility.totalTime(monReg.Text, tueReg.Text, wedReg.Text, thuReg.Text, friReg.Text, satReg.Text, sunReg.Text)
            lblWeekTotal_OverTime.Text = CandidateUtility.totalTime(monOvr.Text, tueOvr.Text, wedOvr.Text, thuOvr.Text, friOvr.Text, satOvr.Text, sunOvr.Text)
            lblWeekTotal_DoubleTime.Text = CandidateUtility.totalTime(monHol.Text, tueHol.Text, wedHol.Text, thuHol.Text, friHol.Text, satHol.Text, sunHol.Text)

            If Not blnAllowMonday And Not blnAllowTuesday And Not blnAllowWednesday And Not blnAllowThursday _
                And Not blnAllowFriday And Not blnAllowSaturday And Not blnAllowSunday Then
                btnSave.Enabled = False
                btnDraft.Enabled = False
            End If

            If blnFirstRow Then
                trTblHeader.Visible = False
            End If
            blnFirstRow = True

        End If

        If e.Item.ItemType = ListItemType.Footer Then
            Dim lblTotMonday As Label = e.Item.FindControl("lblTotMonday")
            Dim lblTotTuesday As Label = e.Item.FindControl("lblTotTuesday")
            Dim lblTotWednesday As Label = e.Item.FindControl("lblTotWednesday")
            Dim lblTotThursday As Label = e.Item.FindControl("lblTotThursday")
            Dim lblTotFriday As Label = e.Item.FindControl("lblTotFriday")
            Dim lblTotSatday As Label = e.Item.FindControl("lblTotSaturday")
            Dim lblTotSunday As Label = e.Item.FindControl("lblTotSunday")
            Dim lblTimesheetTotal As Label = e.Item.FindControl("lblTimesheetTotal")
            lblTotMonday.Text = ViewState("lblMonday")
            lblTotTuesday.Text = ViewState("lblTuesday")
            lblTotWednesday.Text = ViewState("lblWednesday")
            lblTotThursday.Text = ViewState("lblThursday")
            lblTotFriday.Text = ViewState("lblFriday")
            lblTotSatday.Text = ViewState("lblSaturday")
            lblTotSunday.Text = ViewState("lblSunday")
            ViewState("lblMonday") = "00:00"
            ViewState("lblTuesday") = "00:00"
            ViewState("lblWednesday") = "00:00"
            ViewState("lblThursday") = "00:00"
            ViewState("lblFriday") = "00:00"
            ViewState("lblSaturday") = "00:00"
            ViewState("lblSunday") = "00:00"

            lblTimesheetTotal.Text = CandidateUtility.totalTime(lblTotMonday.Text, lblTotTuesday.Text, lblTotWednesday.Text, lblTotThursday.Text, _
                                                                lblTotFriday.Text, lblTotSatday.Text, lblTotSunday.Text)
        End If

    End Sub


    '<summary>initializeViewState: Initialize the ViewState variables</summary>
    '<param name=” ”></param>
    '<returns>NOTHING</param>
    '<author>RGBSI</author>
    '<creationDate>(22-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub initializeViewState()
        ViewState("totMonday") = "00:00"
        ViewState("totTueday") = "00:00"
        ViewState("totWedday") = "00:00"
        ViewState("totThuday") = "00:00"
        ViewState("totFriday") = "00:00"
        ViewState("totSatday") = "00:00"
        ViewState("totSunday") = "00:00"
        ViewState("lblMonday") = "00:00"
        ViewState("lblTuesday") = "00:00"
        ViewState("lblWednesday") = "00:00"
        ViewState("lblThursday") = "00:00"
        ViewState("lblFriday") = "00:00"
        ViewState("lblSaturday") = "00:00"
        ViewState("lblSunday") = "00:00"
    End Sub
    '<summary>calculateOverTime: Calculate the overTime hours for a specific day</summary>
    '<param name=” ”></param>
    '<returns>Calculated OverTime Hours</param>
    '<author>RGBSI</author>
    '<creationDate>(22-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Function calculateOverTime(ByVal regularTime As String, ByVal timeLimit As Integer) As String
        Dim overTime As String = "00:00"
        Dim regTime As String() = regularTime.Split(":")
        Dim newMin, newHour As String
        Dim hasOverTime As String = regularTime
        If (Convert.ToInt32(regTime(0)) > timeLimit And Convert.ToInt32(regTime(1)) >= 0) Or _
            (Convert.ToInt32(regTime(0)) = timeLimit And Convert.ToInt32(regTime(1)) > 0) Then
            newHour = Convert.ToInt32(regTime(0)) - timeLimit
            newMin = regTime(1)
            If newHour < 10 Then
                newHour = "0" & newHour.ToString
            End If
            If newMin < 10 Then
                newMin = "0" & newMin.ToString
            End If
            overTime = newHour.ToString & ":" & newMin.ToString
            hasOverTime = "True"
        End If
        Return overTime & "," & hasOverTime
    End Function
    Public Function ManipulateOverTime(ByVal regularTime As String, ByVal ConfigTime As String) As String
        MsgBox(Date.Now)
        Dim TimeA As Date = ConfigTime
        Dim TimeB As Date = regularTime
        Dim hh As Integer
        Dim mm As Integer
        Dim strOutTime As String = Nothing
        'Dim ss As Integer

        'If Not Date.TryParse(regularTime, TimeA) Then
        '    ' Not a date
        'End If
        'If Not Date.TryParse(ConfigTime, TimeB) Then
        '    ' Not a date
        'End If
        ' Subtract (= time between)
        hh = TimeB.Subtract(TimeA).Hours
        mm = TimeB.Subtract(TimeA).Minutes
        'ss = TimeB.Subtract(TimeA).Seconds
        'TextBox3.Text = hh.ToString.PadLeft(2, CChar("0")) & ":" & mm.ToString.PadLeft(2, CChar("0"))
        strOutTime = hh.ToString.PadLeft(2, CChar("0")) & ":" & mm.ToString.PadLeft(2, CChar("0"))

        Return strOutTime

    End Function
    '<summary>dlExtraHours_ItemCommand: Handles the event for any clicks, like Calculate Button click, clicks for show OverTime/DoubleTime, inside the datalist</summary>
    '<param name=” ”></param>
    '<returns>NOTHING</param>
    '<author>RGBSI</author>
    '<creationDate>(22-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Protected Sub dlExtraHours_ItemCommand(ByVal source As Object, ByVal e As System.Web.UI.WebControls.DataListCommandEventArgs) Handles dlExtraHours.ItemCommand
        lblMsg.Text = ""
        If e.CommandName = "Change" Then

            Dim regExpValMondayOverTime As RegularExpressionValidator = e.Item.FindControl("regExpValMondayOverTime")

            Dim lnkAddOverTime As LinkButton = e.Item.FindControl("lnkAddOverTime")
            Dim lnkAddHolidayTime As LinkButton = e.Item.FindControl("lnkAddHolidayTime")
            Dim lnkCostCentre As Label = e.Item.FindControl("lnkCostCentre")

            Dim lblMonday As RadTimePicker = e.Item.FindControl("lblMonday")
            Dim lblTuesday As RadTimePicker = e.Item.FindControl("lblTuesday")
            Dim lblWednesday As RadTimePicker = e.Item.FindControl("lblWednesday")
            Dim lblThursday As RadTimePicker = e.Item.FindControl("lblThursday")
            Dim lblFriday As RadTimePicker = e.Item.FindControl("lblFriday")
            Dim lblSaturday As RadTimePicker = e.Item.FindControl("lblSaturday")
            Dim lblSunday As RadTimePicker = e.Item.FindControl("lblSunday")

            'changed by dhandapani - new radtimepicker control has replaced with old textbox
            'If lblMonday.Text.Trim = "" Then
            '    lblMonday.Text = "00:00"
            'End If
            'If lblTuesday.Text.Trim = "" Then
            '    lblTuesday.Text = "00:00"
            'End If
            'If lblWednesday.Text.Trim = "" Then
            '    lblWednesday.Text = "00:00"
            'End If
            'If lblThursday.Text.Trim = "" Then
            '    lblThursday.Text = "00:00"
            'End If
            'If lblFriday.Text.Trim = "" Then
            '    lblFriday.Text = "00:00"
            'End If
            'If lblSaturday.Text.Trim = "" Then
            '    lblSaturday.Text = "00:00"
            'End If
            'If lblSunday.Text.Trim = "" Then
            '    lblSunday.Text = "00:00"
            'End If



            Dim lblMondayRegularTime As TextBox = e.Item.FindControl("lblMondayRegularTime")
            Dim lblTuesdayRegularTime As TextBox = e.Item.FindControl("lblTuesdayRegularTime")
            Dim lblWednesdayRegularTime As TextBox = e.Item.FindControl("lblWednesdayRegularTime")
            Dim lblThursdayRegularTime As TextBox = e.Item.FindControl("lblThursdayRegularTime")
            Dim lblFridayRegularTime As TextBox = e.Item.FindControl("lblFridayRegularTime")
            Dim lblSaturdayRegularTime As TextBox = e.Item.FindControl("lblSaturdayRegularTime")
            Dim lblSundayRegularTime As TextBox = e.Item.FindControl("lblSundayRegularTime")


            Dim lblMondayOverTime As TextBox = e.Item.FindControl("lblMondayOverTime")
            Dim lblTuesdayOverTime As TextBox = e.Item.FindControl("lblTuesdayOverTime")
            Dim lblWednesdayOverTime As TextBox = e.Item.FindControl("lblWednesdayOverTime")
            Dim lblThursdayOverTime As TextBox = e.Item.FindControl("lblThursdayOverTime")
            Dim lblFridayOverTime As TextBox = e.Item.FindControl("lblFridayOverTime")
            Dim lblSaturdayOverTime As TextBox = e.Item.FindControl("lblSaturdayOverTime")
            Dim lblSundayOverTime As TextBox = e.Item.FindControl("lblSundayOverTime")


            Dim lblMondayHolidayTime As TextBox = e.Item.FindControl("lblMondayHolidayTime")
            Dim lblTuesdayHolidayTime As TextBox = e.Item.FindControl("lblTuesdayHolidayTime")
            Dim lblWednesdayHolidayTime As TextBox = e.Item.FindControl("lblWednesdayHolidayTime")
            Dim lblThursdayHolidayTime As TextBox = e.Item.FindControl("lblThursdayHolidayTime")
            Dim lblFridayHolidayTime As TextBox = e.Item.FindControl("lblFridayHolidayTime")
            Dim lblSaturdayHolidayTime As TextBox = e.Item.FindControl("lblSaturdayHolidayTime")
            Dim lblSundayHolidayTime As TextBox = e.Item.FindControl("lblSundayHolidayTime")


            Dim txtMonUnits As TextBox = e.Item.FindControl("txtMonUnits")
            Dim txtTueUnits As TextBox = e.Item.FindControl("txtTueUnits")
            Dim txtWedUnits As TextBox = e.Item.FindControl("txtWedUnits")
            Dim txtThuUnits As TextBox = e.Item.FindControl("txtThuUnits")
            Dim txtFriUnits As TextBox = e.Item.FindControl("txtFriUnits")
            Dim txtSatUnits As TextBox = e.Item.FindControl("txtSatUnits")
            Dim txtSunUnits As TextBox = e.Item.FindControl("txtSunUnits")


            Dim rowRegularTimeHours As HtmlTableRow = e.Item.FindControl("rowRegularTimeHours")
            Dim rowOverTimeHours As HtmlTableRow = e.Item.FindControl("rowOverTimeHours")
            Dim rowHolidayTimeHours As HtmlTableRow = e.Item.FindControl("rowHolidayTimeHours")
            hdnCalculated.Value = "True"
            rowOverTimeHours.Visible = False
            rowHolidayTimeHours.Visible = False
            Dim hasOverTime As Boolean = False
            Dim hasHolidayTime As Boolean = False
            'If e.Item.ItemIndex = 0 Then
            '    lnkCostCentre.Text = ViewState("cost_center_name").ToString
            'End If
            tempTime_Table = ViewState("dtTempTimeSheet")
            'initializing the datatable values with 00:00
            tempTime_Table(e.Item.ItemIndex)("over_time_monday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("double_time_monday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("double_time_friday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = "00:00"
            tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = "00:00"


            tempTime_Table(e.Item.ItemIndex)("mon_units") = txtMonUnits.Text
            tempTime_Table(e.Item.ItemIndex)("tue_units") = txtTueUnits.Text
            tempTime_Table(e.Item.ItemIndex)("wed_units") = txtWedUnits.Text
            tempTime_Table(e.Item.ItemIndex)("thu_units") = txtThuUnits.Text
            tempTime_Table(e.Item.ItemIndex)("fri_units") = txtFriUnits.Text
            tempTime_Table(e.Item.ItemIndex)("sat_units") = txtSatUnits.Text
            tempTime_Table(e.Item.ItemIndex)("sun_units") = txtSunUnits.Text


            'FOR WEEKDAYS
            'calculating the regular time, over time and double time for weekdays according to the billing structure created.
            Dim rdrRTWeekday As SqlDataReader = Nothing
            rdrRTWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "RT", "WEEKDAY")
            Try
                If rdrRTWeekday.HasRows() Then
                    Do While rdrRTWeekday.Read



                        'TO CHECK IF SATURDAY IS INCLUDED IN WEEKDAY
                        Dim blnAddSaturday As Boolean = False
                        Dim rdrWRTSaturday As SqlDataReader = Nothing
                        rdrWRTSaturday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "RT", "SATURDAY")

                        If rdrWRTSaturday.HasRows() Then
                            Do While rdrWRTSaturday.Read
                                blnAddSaturday = rdrWRTSaturday("is_hours_per_week")
                            Loop
                        End If
                        If rdrWRTSaturday IsNot Nothing Then
                            rdrWRTSaturday.Close()
                            rdrWRTSaturday = Nothing
                        End If

                        'TO CHECK IF SUNDAY IS INCLUDED IN WEEKDAY
                        Dim blnAddSunday As Boolean = False
                        Dim rdrWRTSunday As SqlDataReader = Nothing
                        rdrWRTSunday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "RT", "SUNDAY")

                        If rdrWRTSunday.HasRows() Then
                            Do While rdrWRTSunday.Read
                                blnAddSunday = rdrWRTSunday("is_hours_per_week")
                            Loop
                        End If
                        If rdrWRTSunday IsNot Nothing Then
                            rdrWRTSunday.Close()
                            rdrWRTSunday = Nothing
                        End If


                        'IF IT IS DAILY
                        'calculating the weekdays regular time, over time and double time for hours per day
                        If (rdrRTWeekday("is_hours_per_day") = True And rdrRTWeekday("is_hours_per_week") = False) Then
                            Dim reghour As String = rdrRTWeekday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00"
                            If Not getOverTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = reghour
                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = getOverTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), reghour)
                            Else
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = "00:00"
                            End If

                            If Not getOverTime(CDate(lblTuesday.SelectedDate).ToString("HH:mm"), reghour) = "00:00" Then
                                hasOverTime = True
                                lblTuesdayRegularTime.Text = reghour
                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = getOverTime(CDate(lblTuesday.SelectedDate).ToString("HH:mm"), reghour)
                            Else
                                lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = "00:00"
                            End If

                            If Not getOverTime(CDate(lblWednesday.SelectedDate).ToString("HH:mm"), reghour) = "00:00" Then
                                hasOverTime = True
                                lblWednesdayRegularTime.Text = reghour
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = getOverTime(CDate(lblWednesday.SelectedDate).ToString("HH:mm"), reghour)
                            Else
                                lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = "00:00"
                            End If

                            If Not getOverTime(CDate(lblThursday.SelectedDate).ToString("HH:mm"), reghour) = "00:00" Then
                                hasOverTime = True
                                lblThursdayRegularTime.Text = reghour
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = getOverTime(CDate(lblThursday.SelectedDate).ToString("HH:mm"), reghour)
                            Else
                                lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"

                            End If

                            If Not getOverTime(CDate(lblFriday.SelectedDate).ToString("HH:mm"), reghour) = "00:00" Then
                                hasOverTime = True
                                lblFridayRegularTime.Text = reghour
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = getOverTime(CDate(lblFriday.SelectedDate).ToString("HH:mm"), reghour)
                            Else
                                lblFridayRegularTime.Text = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"
                            End If

                            Dim rdrDTWeekday As SqlDataReader = Nothing
                            rdrDTWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "WEEKDAY")
                            Try
                                If rdrDTWeekday.HasRows() Then
                                    Do While rdrDTWeekday.Read
                                        If (rdrDTWeekday("is_hours_per_day") = True And rdrDTWeekday("is_hours_per_week") = False) Then
                                            Dim otHour As String = reghour

                                            Dim rdrOTWeekday As SqlDataReader = Nothing
                                            rdrOTWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "WEEKDAY")
                                            Try
                                                If rdrOTWeekday.HasRows() Then
                                                    Do While rdrOTWeekday.Read
                                                        If (rdrOTWeekday("is_hours_per_day") = True And rdrOTWeekday("is_hours_per_week") = False) Then
                                                            otHour = getOverTime(rdrOTWeekday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00", rdrOTWeekday("hours_per_day_from").ToString.PadLeft(2, "0") + ":00")
                                                        End If
                                                    Loop
                                                End If
                                            Finally
                                                rdrOTWeekday.Close()
                                                rdrOTWeekday = Nothing
                                            End Try

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_monday") = getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = otHour
                                            Else
                                                tempTime_Table(e.Item.ItemIndex)("double_time_monday") = "00:00"
                                            End If

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = otHour
                                            Else
                                                tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = "00:00"
                                            End If

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = otHour
                                            Else
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = "00:00"
                                            End If

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = otHour
                                            Else
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = "00:00"
                                            End If

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_friday"), otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_friday"), otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = otHour
                                            Else
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = "00:00"
                                            End If
                                        End If
                                    Loop
                                End If
                            Finally
                                rdrDTWeekday.Close()
                                rdrDTWeekday = Nothing
                            End Try
                            'To set the regular time, over time and double time in the datatable
                            If Not tempTime_Table.Columns.Contains("time_monday") Then
                                tempTime_Table.Columns.Add(New DataColumn("time_monday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_tuesday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_wednesday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_thursday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_friday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_saturday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_sunday", GetType(String)))
                            End If
                            tempTime_Table(e.Item.ItemIndex)("time_monday") = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_tuesday") = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_wednesday") = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")


                            tempTime_Table(e.Item.ItemIndex)("regular_time_monday") = lblMondayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_tuesday") = lblTuesdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_wednesday") = lblWednesdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_thursday") = lblThursdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_friday") = lblFridayRegularTime.Text


                        End If

                        'IF IT IS WEEKLY
                        'calculating the weekdays regular time, over time and double time for hours per week






                        If (rdrRTWeekday("is_hours_per_week") = True And rdrRTWeekday("is_hours_per_day") = False) Then

                            Dim totalHours As String
                            tempTime_Table = ViewState("dtTempTimeSheet")
                            Dim reghour As String = rdrRTWeekday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00"













                            'FOR MONDAY
                            totalHours = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                'lblMondayRegularTime.Text = lblMonday.Text
                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = getOverTime(totalHours, reghour)
                                lblMondayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblMonday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"

                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If

                                GoTo A
                            End If

                            'FOR TUESDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = getOverTime(totalHours, reghour)
                                lblTuesdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblTuesday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If

                                GoTo A
                            End If

                            'FOR WEDNESDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = getOverTime(totalHours, reghour)
                                lblWednesdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblWednesday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo A
                            End If

                            'FOR THURSDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = getOverTime(totalHours, reghour)
                                lblThursdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblThursday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo A
                            End If

                            'FOR FRIDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"), CDate(lblFriday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                'dhanda
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = getOverTime(totalHours, reghour)
                                lblFridayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblFriday.SelectedDate).ToString("HH:mm"))


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo A
                            End If


                            'FOR SATURDAY
                            If blnAddSaturday = True Then
                                totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"), _
                                                                        CDate(lblFriday.SelectedDate).ToString("HH:mm"), CDate(lblSaturday.SelectedDate).ToString("HH:mm"))
                                If Not getOverTime(totalHours, reghour) = "00:00" Then
                                    hasOverTime = True
                                    lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                    lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                    lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                    lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                    lblFridayRegularTime.Text = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = getOverTime(totalHours, reghour)
                                    lblSaturdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblSaturday.SelectedDate).ToString("HH:mm"))


                                    If blnAddSunday = True Then
                                        tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                        lblSundayRegularTime.Text = "00:00"
                                    End If


                                    GoTo A
                                End If
                            End If


                            'FOR SUNDAY
                            If blnAddSunday = True Then
                                totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"), CDate(lblFriday.SelectedDate).ToString("HH:mm"), CDate(lblSaturday.SelectedDate).ToString("HH:mm"), CDate(lblSunday.SelectedDate).ToString("HH:mm"))
                                If Not getOverTime(totalHours, reghour) = "00:00" Then
                                    hasOverTime = True
                                    lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                    lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                    lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                    lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                    lblFridayRegularTime.Text = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = getOverTime(totalHours, reghour)
                                    lblSundayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblSunday.SelectedDate).ToString("HH:mm"))


                                    GoTo A
                                End If
                            End If


                            lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                            lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                            lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                            lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                            lblFridayRegularTime.Text = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                            If blnAddSaturday = True Then
                                lblSaturdayRegularTime.Text = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                            End If
                            If blnAddSunday = True Then
                                lblSundayRegularTime.Text = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                            End If



A:
                            'To set the regular time, over time and double time in the datatable
                            If Not tempTime_Table.Columns.Contains("time_monday") Then
                                tempTime_Table.Columns.Add(New DataColumn("time_monday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_tuesday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_wednesday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_thursday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_friday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_saturday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_sunday", GetType(String)))
                            End If
                            tempTime_Table(e.Item.ItemIndex)("time_monday") = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_tuesday") = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_wednesday") = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")

                            tempTime_Table(e.Item.ItemIndex)("regular_time_monday") = lblMondayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_tuesday") = lblTuesdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_wednesday") = lblWednesdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_thursday") = lblThursdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_friday") = lblFridayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_saturday") = lblSaturdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_sunday") = lblSundayRegularTime.Text
                            'To calculate the double time 
                            Dim rdrDTWeekday As SqlDataReader = Nothing
                            rdrDTWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "WEEKDAY")
                            Try
                                If rdrDTWeekday.HasRows() Then
                                    Do While rdrDTWeekday.Read
                                        If (rdrDTWeekday("is_hours_per_week") = True And rdrDTWeekday("is_hours_per_day") = False) Then
                                            Dim otHour As String = reghour

                                            Dim rdrOTWeekday As SqlDataReader = Nothing
                                            rdrOTWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "WEEKDAY")
                                            Try
                                                If rdrOTWeekday.HasRows() Then
                                                    Do While rdrOTWeekday.Read
                                                        If (rdrOTWeekday("is_hours_per_week") = True And rdrOTWeekday("is_hours_per_day") = False) Then
                                                            otHour = getOverTime(rdrOTWeekday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00", rdrOTWeekday("hours_per_week_from").ToString.PadLeft(2, "0") + ":00")
                                                        End If
                                                    Loop
                                                End If
                                            Finally
                                                rdrOTWeekday.Close()
                                                rdrOTWeekday = Nothing
                                            End Try

                                            'FOR MONDAY
                                            totalHours = tempTime_Table(e.Item.ItemIndex)("over_time_monday")
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_monday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_monday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = tempTime_Table(e.Item.ItemIndex)("over_time_tuesday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = tempTime_Table(e.Item.ItemIndex)("over_time_wednesday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = tempTime_Table(e.Item.ItemIndex)("over_time_thursday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If


                                                GoTo A1
                                            End If

                                            'FOR TUESDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = tempTime_Table(e.Item.ItemIndex)("over_time_wednesday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = tempTime_Table(e.Item.ItemIndex)("over_time_thursday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If

                                                GoTo A1
                                            End If

                                            'FOR WEDNESDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = tempTime_Table(e.Item.ItemIndex)("over_time_thursday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If


                                                GoTo A1
                                            End If

                                            'FOR THURSDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_thursday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If

                                                GoTo A1
                                            End If

                                            'FOR FRIDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), tempTime_Table(e.Item.ItemIndex)("over_time_friday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_friday"))


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If


                                                GoTo A1
                                            End If



                                            'FOR SATURDAY
                                            If blnAddSaturday = True Then
                                                totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), tempTime_Table(e.Item.ItemIndex)("over_time_friday"), , tempTime_Table(e.Item.ItemIndex)("over_time_saturday"))
                                                If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                    hasHolidayTime = True
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = getOverTime(totalHours, otHour)
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_saturday"))


                                                    If blnAddSunday = True Then
                                                        tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                        tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                    End If


                                                    GoTo A1
                                                End If

                                            End If


                                            'FOR SUNDAY
                                            If blnAddSunday = True Then
                                                totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), tempTime_Table(e.Item.ItemIndex)("over_time_friday"), tempTime_Table(e.Item.ItemIndex)("over_time_saturday"), tempTime_Table(e.Item.ItemIndex)("over_time_sunday"))
                                                If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                    hasHolidayTime = True
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = getOverTime(totalHours, otHour)
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_sunday"))


                                                    GoTo A1
                                                End If

                                            End If




A1:
                                        End If
                                    Loop
                                End If
                            Finally
                                rdrDTWeekday.Close()
                                rdrDTWeekday = Nothing
                            End Try
                        End If

                        'IF IT IS BOTH DAILY AND WEEKLY
                        'calculating the weekdays regular time, over time and double time for both hours per week and hours per day
                        If (rdrRTWeekday("is_hours_per_day") = True And rdrRTWeekday("is_hours_per_week") = True) Then




                            Dim totalHours As String
                            tempTime_Table = ViewState("dtTempTimeSheet")
                            Dim reghour As String = rdrRTWeekday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00"


                            'FOR MONDAY
                            totalHours = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = getOverTime(totalHours, reghour)
                                lblMondayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblMonday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo BOTH
                            End If


                            'FOR TUESDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = getOverTime(totalHours, reghour)
                                lblTuesdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblTuesday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo BOTH
                            End If

                            'FOR WEDNESDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = getOverTime(totalHours, reghour)
                                lblWednesdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblWednesday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = "00:00"
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo BOTH
                            End If

                            'FOR THURSDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = getOverTime(totalHours, reghour)
                                lblThursdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblThursday.SelectedDate).ToString("HH:mm"))
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                lblFridayRegularTime.Text = "00:00"


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo BOTH
                            End If

                            'FOR FRIDAY
                            totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"), CDate(lblFriday.SelectedDate).ToString("HH:mm"))
                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                                hasOverTime = True
                                lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = getOverTime(totalHours, reghour)
                                lblFridayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblFriday.SelectedDate).ToString("HH:mm"))


                                If blnAddSaturday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = "00:00"
                                End If
                                If blnAddSunday = True Then
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                    lblSundayRegularTime.Text = "00:00"
                                End If


                                GoTo BOTH
                            End If


                            'FOR SATURDAY
                            If blnAddSaturday = True Then
                                totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"), CDate(lblFriday.SelectedDate).ToString("HH:mm"), CDate(lblSaturday.SelectedDate).ToString("HH:mm"))
                                If Not getOverTime(totalHours, reghour) = "00:00" Then
                                    hasOverTime = True
                                    lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                    lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                    lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                    lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                    lblFridayRegularTime.Text = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = getOverTime(totalHours, reghour)
                                    lblSaturdayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblSaturday.SelectedDate).ToString("HH:mm"))


                                    If blnAddSunday = True Then
                                        tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                        lblSundayRegularTime.Text = "00:00"
                                    End If


                                    GoTo BOTH
                                End If
                            End If


                            'FOR SUNDAY
                            If blnAddSunday = True Then
                                totalHours = CandidateUtility.totalTime(CDate(lblMonday.SelectedDate).ToString("HH:mm"), CDate(lblTuesday.SelectedDate).ToString("HH:mm"), CDate(lblWednesday.SelectedDate).ToString("HH:mm"), CDate(lblThursday.SelectedDate).ToString("HH:mm"), CDate(lblFriday.SelectedDate).ToString("HH:mm"), CDate(lblSaturday.SelectedDate).ToString("HH:mm"), CDate(lblSunday.SelectedDate).ToString("HH:mm"))
                                If Not getOverTime(totalHours, reghour) = "00:00" Then
                                    hasOverTime = True
                                    lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                                    lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                                    lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                                    lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                                    lblFridayRegularTime.Text = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                                    lblSaturdayRegularTime.Text = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = getOverTime(totalHours, reghour)
                                    lblSundayRegularTime.Text = getRegularTime(totalHours, reghour, CDate(lblSunday.SelectedDate).ToString("HH:mm"))


                                    GoTo BOTH
                                End If
                            End If







                            lblMondayRegularTime.Text = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                            lblTuesdayRegularTime.Text = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                            lblWednesdayRegularTime.Text = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                            lblThursdayRegularTime.Text = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                            lblFridayRegularTime.Text = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                            lblSaturdayRegularTime.Text = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                            lblSundayRegularTime.Text = CDate(lblSunday.SelectedDate).ToString("HH:mm")

BOTH:
                            'To set the regular time, over time and double time in the datatable
                            If Not tempTime_Table.Columns.Contains("time_monday") Then
                                tempTime_Table.Columns.Add(New DataColumn("time_monday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_tuesday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_wednesday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_thursday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_friday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_saturday", GetType(String)))
                                tempTime_Table.Columns.Add(New DataColumn("time_sunday", GetType(String)))
                            End If
                            tempTime_Table(e.Item.ItemIndex)("time_monday") = CDate(lblMonday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_tuesday") = CDate(lblTuesday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_wednesday") = CDate(lblWednesday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_thursday") = CDate(lblThursday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_friday") = CDate(lblFriday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")

                            tempTime_Table(e.Item.ItemIndex)("regular_time_monday") = lblMondayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_tuesday") = lblTuesdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_wednesday") = lblWednesdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_thursday") = lblThursdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_friday") = lblFridayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_saturday") = lblSaturdayRegularTime.Text
                            tempTime_Table(e.Item.ItemIndex)("regular_time_sunday") = lblSundayRegularTime.Text




                            'To calculate the double time 
                            Dim rdrDTWeekday As SqlDataReader = Nothing
                            rdrDTWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "WEEKDAY")
                            Try
                                If rdrDTWeekday.HasRows() Then
                                    Do While rdrDTWeekday.Read
                                        If (rdrDTWeekday("is_hours_per_week") = True And rdrDTWeekday("is_hours_per_day") = True) Then
                                            Dim otHour As String = reghour

                                            Dim rdrOTWeekday As SqlDataReader = Nothing
                                            rdrOTWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "WEEKDAY")
                                            Try
                                                If rdrOTWeekday.HasRows() Then
                                                    Do While rdrOTWeekday.Read
                                                        If (rdrOTWeekday("is_hours_per_week") = True And rdrOTWeekday("is_hours_per_day") = True) Then
                                                            otHour = getOverTime(rdrOTWeekday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00", rdrOTWeekday("hours_per_week_from").ToString.PadLeft(2, "0") + ":00")
                                                        End If
                                                    Loop
                                                End If
                                            Finally
                                                rdrOTWeekday.Close()
                                                rdrOTWeekday = Nothing
                                            End Try


                                            'FOR MONDAY
                                            totalHours = tempTime_Table(e.Item.ItemIndex)("over_time_monday")
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_monday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_monday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = tempTime_Table(e.Item.ItemIndex)("over_time_tuesday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = tempTime_Table(e.Item.ItemIndex)("over_time_wednesday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = tempTime_Table(e.Item.ItemIndex)("over_time_thursday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"



                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If


                                                GoTo BOTH1
                                            End If



                                            'FOR TUESDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = tempTime_Table(e.Item.ItemIndex)("over_time_wednesday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = tempTime_Table(e.Item.ItemIndex)("over_time_thursday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"



                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If


                                                GoTo BOTH1
                                            End If

                                            'FOR WEDNESDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = tempTime_Table(e.Item.ItemIndex)("over_time_thursday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = "00:00"
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If


                                                GoTo BOTH1
                                            End If

                                            'FOR THURSDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_thursday"))
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = tempTime_Table(e.Item.ItemIndex)("over_time_friday")
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = "00:00"


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If


                                                GoTo BOTH1
                                            End If

                                            'FOR FRIDAY
                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), tempTime_Table(e.Item.ItemIndex)("over_time_friday"))
                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = getOverTime(totalHours, otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_friday"))


                                                If blnAddSaturday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = tempTime_Table(e.Item.ItemIndex)("over_time_saturday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                                                End If
                                                If blnAddSunday = True Then
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                End If



                                                GoTo BOTH1
                                            End If

                                            'FOR SATURDAY
                                            If blnAddSaturday = True Then
                                                totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), tempTime_Table(e.Item.ItemIndex)("over_time_friday"), tempTime_Table(e.Item.ItemIndex)("over_time_saturday"))
                                                If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                    hasHolidayTime = True
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = getOverTime(totalHours, otHour)
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_saturday"))


                                                    If blnAddSunday = True Then
                                                        tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = tempTime_Table(e.Item.ItemIndex)("over_time_sunday")
                                                        tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                                                    End If



                                                    GoTo BOTH1
                                                End If
                                            End If

                                            'FOR SUNDAY
                                            If blnAddSunday = True Then
                                                totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), tempTime_Table(e.Item.ItemIndex)("over_time_friday"), tempTime_Table(e.Item.ItemIndex)("over_time_saturday"), tempTime_Table(e.Item.ItemIndex)("over_time_sunday"))
                                                If Not getOverTime(totalHours, otHour) = "00:00" Then
                                                    hasHolidayTime = True
                                                    tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = getOverTime(totalHours, otHour)
                                                    tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = getRegularTime(totalHours, otHour, tempTime_Table(e.Item.ItemIndex)("over_time_sunday"))



                                                    GoTo BOTH1
                                                End If
                                            End If



BOTH1:





                                            '*****************************

                                            'To calculate the over time 
                                            Dim regDailyhour As String = rdrRTWeekday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00"
                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_monday"), regDailyhour) = "00:00" Then
                                                hasOverTime = True
                                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_monday"), regDailyhour))
                                                tempTime_Table(e.Item.ItemIndex)("regular_time_monday") = regDailyhour
                                            Else
                                                lblMondayRegularTime.Text = tempTime_Table(e.Item.ItemIndex)("regular_time_monday")
                                            End If


                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_tuesday"), regDailyhour) = "00:00" Then
                                                hasOverTime = True
                                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_tuesday"), regDailyhour))
                                                tempTime_Table(e.Item.ItemIndex)("regular_time_tuesday") = regDailyhour
                                            Else
                                                lblTuesdayRegularTime.Text = tempTime_Table(e.Item.ItemIndex)("regular_time_tuesday")
                                            End If

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_wednesday"), regDailyhour) = "00:00" Then
                                                hasOverTime = True
                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_wednesday"), regDailyhour))
                                                tempTime_Table(e.Item.ItemIndex)("regular_time_wednesday") = regDailyhour
                                            Else
                                                lblWednesdayRegularTime.Text = tempTime_Table(e.Item.ItemIndex)("regular_time_wednesday")
                                            End If

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_thursday"), regDailyhour) = "00:00" Then
                                                hasOverTime = True
                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_thursday"), regDailyhour))
                                                tempTime_Table(e.Item.ItemIndex)("regular_time_thursday") = regDailyhour
                                            Else
                                                lblThursdayRegularTime.Text = tempTime_Table(e.Item.ItemIndex)("regular_time_thursday")
                                            End If

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_friday"), regDailyhour) = "00:00" Then
                                                hasOverTime = True
                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_friday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("regular_time_friday"), regDailyhour))
                                                tempTime_Table(e.Item.ItemIndex)("regular_time_friday") = regDailyhour
                                            Else
                                                lblFridayRegularTime.Text = tempTime_Table(e.Item.ItemIndex)("regular_time_friday")
                                            End If






                                            'To calculate the double time 
                                            Dim rdrDTDailyWeekday As SqlDataReader = Nothing
                                            rdrDTDailyWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "WEEKDAY")
                                            Try
                                                If rdrDTDailyWeekday.HasRows() Then
                                                    Do While rdrDTDailyWeekday.Read
                                                        If (rdrDTDailyWeekday("is_hours_per_day") = True And rdrDTDailyWeekday("is_hours_per_week") = True) Then
                                                            Dim otDailyHour As String = reghour

                                                            Dim rdrOTDailyWeekday As SqlDataReader = Nothing
                                                            rdrOTDailyWeekday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "WEEKDAY")
                                                            Try
                                                                If rdrOTDailyWeekday.HasRows() Then
                                                                    Do While rdrOTDailyWeekday.Read
                                                                        If (rdrOTDailyWeekday("is_hours_per_day") = True And rdrOTDailyWeekday("is_hours_per_week") = True) Then
                                                                            otDailyHour = getOverTime(rdrOTDailyWeekday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00", rdrOTDailyWeekday("hours_per_day_from").ToString.PadLeft(2, "0") + ":00")
                                                                        End If
                                                                    Loop
                                                                End If
                                                            Finally
                                                                rdrOTDailyWeekday.Close()
                                                                rdrOTDailyWeekday = Nothing
                                                            End Try

                                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), otDailyHour) = "00:00" Then
                                                                hasHolidayTime = True
                                                                tempTime_Table(e.Item.ItemIndex)("double_time_monday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("double_time_monday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_monday"), otDailyHour))
                                                                tempTime_Table(e.Item.ItemIndex)("over_time_monday") = otDailyHour
                                                            End If

                                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), otDailyHour) = "00:00" Then
                                                                hasHolidayTime = True
                                                                tempTime_Table(e.Item.ItemIndex)("double_time_tuesday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("double_time_tuesday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_tuesday"), otDailyHour))
                                                                tempTime_Table(e.Item.ItemIndex)("over_time_tuesday") = otDailyHour
                                                            End If

                                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), otDailyHour) = "00:00" Then
                                                                hasHolidayTime = True
                                                                tempTime_Table(e.Item.ItemIndex)("double_time_wednesday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("double_time_wednesday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_wednesday"), otDailyHour))
                                                                tempTime_Table(e.Item.ItemIndex)("over_time_wednesday") = otDailyHour
                                                            End If

                                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), otDailyHour) = "00:00" Then
                                                                hasHolidayTime = True
                                                                tempTime_Table(e.Item.ItemIndex)("double_time_thursday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("double_time_thursday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_thursday"), otDailyHour))
                                                                tempTime_Table(e.Item.ItemIndex)("over_time_thursday") = otDailyHour
                                                            End If

                                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_friday"), otDailyHour) = "00:00" Then
                                                                hasHolidayTime = True
                                                                tempTime_Table(e.Item.ItemIndex)("double_time_friday") = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("double_time_friday"), getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_friday"), otDailyHour))
                                                                tempTime_Table(e.Item.ItemIndex)("over_time_friday") = otDailyHour
                                                            End If
                                                        End If
                                                    Loop
                                                End If
                                            Finally
                                                rdrDTDailyWeekday.Close()
                                                rdrDTDailyWeekday = Nothing
                                            End Try




                                            '*******************************



                                        End If
                                    Loop
                                End If
                            Finally
                                rdrDTWeekday.Close()
                                rdrDTWeekday = Nothing
                            End Try



                        End If

                    Loop
                End If

            Finally
                rdrRTWeekday.Close()
                rdrRTWeekday = Nothing
            End Try

            'FOR SATURDAY
            'calculating the saturdays regular time, over time and double time for hours per week
            Dim rdrRTSaturday As SqlDataReader = Nothing
            rdrRTSaturday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "RT", "SATURDAY")
            Try
                If rdrRTSaturday.HasRows() Then
                    Do While rdrRTSaturday.Read
                        If rdrRTSaturday("is_hours_per_day") = True Then
                            Dim reghour As String = rdrRTSaturday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00"
                            If Not getOverTime(CDate(lblSaturday.SelectedDate).ToString("HH:mm"), reghour) = "00:00" Then
                                hasOverTime = True
                                lblSaturdayRegularTime.Text = reghour
                                tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = getOverTime(CDate(lblSaturday.SelectedDate).ToString("HH:mm"), reghour)
                            Else
                                lblSaturdayRegularTime.Text = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = "00:00"
                            End If
                            Dim rdrDTSaturday As SqlDataReader = Nothing
                            rdrDTSaturday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "SATURDAY")
                            Try
                                If rdrDTSaturday.HasRows() Then
                                    Do While rdrDTSaturday.Read
                                        If rdrDTSaturday("is_hours_per_day") = True Then
                                            Dim otHour As String = reghour

                                            Dim rdrOTSaturday As SqlDataReader = Nothing
                                            rdrOTSaturday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "SATURDAY")
                                            Try
                                                If rdrOTSaturday.HasRows() Then
                                                    Do While rdrOTSaturday.Read
                                                        If rdrOTSaturday("is_hours_per_day") = True Then
                                                            otHour = getOverTime(rdrOTSaturday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00", rdrOTSaturday("hours_per_day_from").ToString.PadLeft(2, "0") + ":00")
                                                        End If
                                                    Loop
                                                End If
                                            Finally
                                                rdrOTSaturday.Close()
                                                rdrOTSaturday = Nothing
                                            End Try

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_saturday"), otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_saturday"), otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = otHour
                                            Else
                                                tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = "00:00"
                                            End If
                                        End If
                                    Loop
                                End If
                            Finally
                                rdrDTSaturday.Close()
                                rdrDTSaturday = Nothing
                            End Try
                            tempTime_Table(e.Item.ItemIndex)("time_saturday") = CDate(lblSaturday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("regular_time_saturday") = lblSaturdayRegularTime.Text
                        End If

                        '                        If rdrRTSaturday("is_hours_per_week") = True Then
                        '                            Dim totalHours As String
                        '                            tempTime_Table = ViewState("dtTempTimeSheet")
                        '                            Dim reghour As String = rdrRTSaturday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00"

                        '                            'FOR SATURDAY
                        '                            totalHours = CandidateUtility.totalTime(lblSaturday.Text, "00:00")
                        '                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                        '                                hasOverTime = True
                        '                                tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = getOverTime(totalHours, reghour)
                        '                                lblSaturdayRegularTime.Text = getRegularTime(totalHours, reghour, lblSaturday.Text)

                        '                                GoTo B
                        '                            End If

                        '                            lblSaturdayRegularTime.Text = lblSaturday.Text

                        'B:
                        '                            tempTime_Table(e.Item.ItemIndex)("time_saturday") = lblSaturday.Text
                        '                            tempTime_Table(e.Item.ItemIndex)("regular_time_saturday") = lblSaturdayRegularTime.Text


                        '                            'To calculate the double time 
                        '                            Dim rdrDTSaturday As SqlDataReader = Nothing
                        '                            rdrDTSaturday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "SATURDAY")
                        '                            Try
                        '                                If rdrDTSaturday.HasRows() Then
                        '                                    Do While rdrDTSaturday.Read
                        '                                        If rdrDTSaturday("is_hours_per_week") = True Then
                        '                                            Dim otHour As String = reghour

                        '                                            Dim rdrOTSaturday As SqlDataReader = Nothing
                        '                                            rdrOTSaturday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "SATURDAY")
                        '                                            Try
                        '                                                If rdrOTSaturday.HasRows() Then
                        '                                                    Do While rdrOTSaturday.Read
                        '                                                        If rdrOTSaturday("is_hours_per_week") = True Then
                        '                                                            otHour = getOverTime(rdrOTSaturday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00", rdrOTSaturday("hours_per_week_from").ToString.PadLeft(2, "0") + ":00")
                        '                                                        End If
                        '                                                    Loop
                        '                                                End If
                        '                                            Finally
                        '                                                rdrOTSaturday.Close()
                        '                                            End Try

                        '                                            'FOR SATURDAY
                        '                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_saturday"), "00:00")
                        '                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                        '                                                hasHolidayTime = True
                        '                                                tempTime_Table(e.Item.ItemIndex)("double_time_saturday") = getOverTime(totalHours, otHour)
                        '                                                tempTime_Table(e.Item.ItemIndex)("over_time_saturday") = getRegularTime(totalHours, reghour, tempTime_Table(e.Item.ItemIndex)("over_time_saturday"))
                        '                                            End If
                        '                                        End If
                        '                                    Loop
                        '                                End If
                        '                            Finally
                        '                                rdrDTSaturday.Close()
                        '                            End Try
                        '                        End If
                    Loop
                End If

            Finally
                rdrRTSaturday.Close()
                rdrRTSaturday = Nothing
            End Try

            'FOR SUNDAY
            'calculating the sundays regular time, over time and double time for hours per week
            Dim rdrRTSunday As SqlDataReader = Nothing
            rdrRTSunday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "RT", "SUNDAY")
            Try
                If rdrRTSunday.HasRows() Then
                    Do While rdrRTSunday.Read
                        If rdrRTSunday("is_hours_per_day") = True Then
                            Dim reghour As String = rdrRTSunday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00"

                            If Not getOverTime(CDate(lblSunday.SelectedDate).ToString("HH:mm"), reghour) = "00:00" Then
                                hasOverTime = True
                                lblSundayRegularTime.Text = reghour
                                tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = getOverTime(CDate(lblSunday.SelectedDate).ToString("HH:mm"), reghour)
                            Else
                                lblSundayRegularTime.Text = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                                tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = "00:00"
                            End If

                            Dim rdrDTSunday As SqlDataReader = Nothing
                            rdrDTSunday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "SUNDAY")
                            Try
                                If rdrDTSunday.HasRows() Then
                                    Do While rdrDTSunday.Read
                                        If rdrDTSunday("is_hours_per_day") = True Then
                                            Dim otHour As String = reghour

                                            Dim rdrOTSunday As SqlDataReader = Nothing
                                            rdrOTSunday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "SUNDAY")
                                            Try
                                                If rdrOTSunday.HasRows() Then
                                                    Do While rdrOTSunday.Read
                                                        If rdrOTSunday("is_hours_per_day") = True Then
                                                            otHour = getOverTime(rdrOTSunday("hours_per_day_to").ToString.PadLeft(2, "0") + ":00", rdrOTSunday("hours_per_day_from").ToString.PadLeft(2, "0") + ":00")
                                                        End If
                                                    Loop
                                                End If
                                            Finally
                                                rdrOTSunday.Close()
                                                rdrOTSunday = Nothing
                                            End Try

                                            If Not getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_sunday"), otHour) = "00:00" Then
                                                hasHolidayTime = True
                                                tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = getOverTime(tempTime_Table(e.Item.ItemIndex)("over_time_sunday"), otHour)
                                                tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = otHour
                                            Else
                                                tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = "00:00"
                                            End If
                                        End If
                                    Loop
                                End If
                            Finally
                                rdrDTSunday.Close()
                                rdrDTSunday = Nothing
                            End Try

                            tempTime_Table(e.Item.ItemIndex)("time_sunday") = CDate(lblSunday.SelectedDate).ToString("HH:mm")
                            tempTime_Table(e.Item.ItemIndex)("regular_time_sunday") = lblSundayRegularTime.Text

                        End If

                        '                        If rdrRTSunday("is_hours_per_week") = True Then

                        '                            Dim totalHours As String
                        '                            tempTime_Table = ViewState("dtTempTimeSheet")
                        '                            Dim reghour As String = rdrRTSunday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00"

                        '                            'FOR SUNDAY
                        '                            totalHours = CandidateUtility.totalTime(lblSunday.Text, "00:00")
                        '                            If Not getOverTime(totalHours, reghour) = "00:00" Then
                        '                                hasOverTime = True
                        '                                tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = getOverTime(totalHours, reghour)
                        '                                lblSundayRegularTime.Text = getRegularTime(totalHours, reghour, lblSunday.Text)

                        '                                GoTo C
                        '                            End If

                        '                            lblSundayRegularTime.Text = lblSunday.Text

                        'C:
                        '                            tempTime_Table(e.Item.ItemIndex)("time_sunday") = lblSunday.Text

                        '                            tempTime_Table(e.Item.ItemIndex)("regular_time_sunday") = lblSundayRegularTime.Text


                        '                            'To calculate the double time 
                        '                            Dim rdrDTSunday As SqlDataReader = Nothing
                        '                            rdrDTSunday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "DT", "SUNDAY")
                        '                            Try
                        '                                If rdrDTSunday.HasRows() Then
                        '                                    Do While rdrDTSunday.Read
                        '                                        If rdrDTSunday("is_hours_per_week") = True Then
                        '                                            Dim otHour As String = reghour

                        '                                            Dim rdrOTSunday As SqlDataReader = Nothing
                        '                                            rdrOTSunday = ClientUtility.getBillingStructureDetails(ViewState("structureID"), "OT", "SUNDAY")
                        '                                            Try
                        '                                                If rdrOTSunday.HasRows() Then
                        '                                                    Do While rdrOTSunday.Read
                        '                                                        If rdrOTSunday("is_hours_per_week") = True Then
                        '                                                            otHour = getOverTime(rdrOTSunday("hours_per_week_to").ToString.PadLeft(2, "0") + ":00", rdrOTSunday("hours_per_week_from").ToString.PadLeft(2, "0") + ":00")
                        '                                                        End If
                        '                                                    Loop
                        '                                                End If
                        '                                            Finally
                        '                                                rdrOTSunday.Close()
                        '                                            End Try

                        '                                            'FOR SUNDAY
                        '                                            totalHours = CandidateUtility.totalTime(tempTime_Table(e.Item.ItemIndex)("over_time_sunday"), "00:00")
                        '                                            If Not getOverTime(totalHours, otHour) = "00:00" Then
                        '                                                hasHolidayTime = True
                        '                                                tempTime_Table(e.Item.ItemIndex)("double_time_sunday") = getOverTime(totalHours, otHour)
                        '                                                tempTime_Table(e.Item.ItemIndex)("over_time_sunday") = getRegularTime(totalHours, reghour, tempTime_Table(e.Item.ItemIndex)("over_time_sunday"))
                        '                                            End If

                        '                                        End If
                        '                                    Loop
                        '                                End If
                        '                            Finally
                        '                                rdrDTSunday.Close()
                        '                            End Try

                        '                        End If
                    Loop
                End If

            Finally
                rdrRTSunday.Close()
                rdrRTSunday = Nothing
            End Try


            rowOverTimeHours.Visible = hasOverTime
            rowHolidayTimeHours.Visible = hasHolidayTime


            '' Calculating total weekly hours 
            'tempTime_Table(e.Item.ItemIndex)(24) = totalTime(tempOverTime(0, 0), tempOverTime(1, 0), tempOverTime(2, 0), tempOverTime(3, 0), tempOverTime(4, 0), _
            '                 tempOverTime(5, 0), tempOverTime(6, 0))

            tempTime_View = New DataView(tempTime_Table)
            'If tempTime_Table.Rows(tempTime_Table.Rows.Count - 1).Item(1).Equals(System.DBNull.Value) Then
            '    tempTime_Table.Rows.RemoveAt(tempTime_Table.Rows.Count - 1)
            'End If

            ' After the calculation of overTime and double time, the result values for timesheet entries are stored in the temporary table.
            ' Again this table is bound to the datalist.
            dlExtraHours.EditItemIndex = -1
            dlExtraHours.DataSource = Nothing
            dlExtraHours.DataSource = tempTime_View
            dlExtraHours.DataBind()
            UpdatePanel1.Update()
            ViewState("dtTempTimeSheet") = tempTime_Table
            lblMsgNoTimesheet.Visible = False
            'GC.Collect()
        End If
        If e.CommandName = "AddRegularTime" Then
            'Dim lnkCostCentre As Label = e.Item.FindControl("lnkCostCentre")
            'Dim lnkAddHolidayTime As LinkButton = e.Item.FindControl("lnkAddHolidayTime")
            Dim lnkAddRegTime As LinkButton = e.Item.FindControl("lnkAddRegTime")
            Dim rowRegularTimeHours As HtmlTableRow = e.Item.FindControl("rowRegularTimeHours")
            rowRegularTimeHours.Visible = True
            lnkAddRegTime.Visible = False
        End If
        If e.CommandName = "AddOverTime" Then
            'Dim lnkCostCentre As Label = e.Item.FindControl("lnkCostCentre")
            'Dim lnkAddHolidayTime As LinkButton = e.Item.FindControl("lnkAddHolidayTime")
            Dim lnkAddOverTime As LinkButton = e.Item.FindControl("lnkAddOverTime")
            Dim rowOverTimeHours As HtmlTableRow = e.Item.FindControl("rowOverTimeHours")
            rowOverTimeHours.Visible = True
            lnkAddOverTime.Visible = False
        End If
        If e.CommandName = "AddHolidayTime" Then
            'Dim lnkCostCentre As Label = e.Item.FindControl("lnkCostCentre")
            'Dim lnkAddOverTime As LinkButton = e.Item.FindControl("lnkAddOverTime")
            Dim lnkAddHolidayTime As LinkButton = e.Item.FindControl("lnkAddHolidayTime")
            Dim rowHolidayTimeHours As HtmlTableRow = e.Item.FindControl("rowHolidayTimeHours")
            rowHolidayTimeHours.Visible = True
            lnkAddHolidayTime.Visible = False
        End If
        If e.CommandName = "Delete" Then

            Dim tempTimeSheet As DataTable = ViewState("dtTempTimeSheet")

            tempDeletedRows = ViewState("tempDeletedRows")
            Dim newDelRow As DataRow = tempDeletedRows.NewRow
            newDelRow.Item("timeSheet_code") = timeSheetCode
            newDelRow.Item("amendment_count") = Convert.ToInt32(ViewState("currentAmendmentCount"))
            newDelRow.Item("cost_center_id") = tempTimeSheet.Rows(e.Item.ItemIndex).Item("cost_center_id")
            newDelRow.Item("business_unit_id") = tempTimeSheet.Rows(e.Item.ItemIndex).Item("business_unit_id")
            tempDeletedRows.Rows.Add(newDelRow)
            ViewState("tempDeletedRows") = tempDeletedRows
            DisableControls()
            tempTimeSheet.Rows.RemoveAt(e.Item.ItemIndex)
            dlExtraHours.DataSource = Nothing
            If tempTimeSheet.Rows.Count > 0 Then
                dlExtraHours.DataSource = tempTimeSheet
                EnableControls()
            End If
            dlExtraHours.DataBind()
            UpdatePanel1.Update()
            ViewState("dtTempTimeSheet") = tempTimeSheet
            lblMsgNoTimesheet.Visible = False
            '13-08-2015|Gunnaiah| Modified for Hide manual Timesheet entry
            Dim client_details As tbl_client_info = CandidateUtility.CheckTimesheetManualEntry(cEncryption.Decrypt(Request.QueryString("eng_code")))
            'If Session("is_enable_manual_timesheet_entry") AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
            '    dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
            '    dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
            '    dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
            '    dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
            'End If
            If Not IsNothing(client_details) AndAlso Not IsNothing(client_details.is_enable_manual_timesheet_entry) AndAlso client_details.is_enable_manual_timesheet_entry AndAlso Not divNodata.Visible AndAlso dlExtraHours.Items.Count > 0 Then
                dlExtraHours.Items(0).FindControl("rowRegularHours").Visible = False
                dlExtraHours.Items(0).FindControl("rowRegularTimeHours").Visible = True
                dlExtraHours.Items(0).FindControl("rowOverTimeHours").Visible = True
                dlExtraHours.Items(0).FindControl("rowHolidayTimeHours").Visible = True
                hdnCalculated.Value = True
            End If
        End If
    End Sub

    Private Sub createTableRowsForDeletedData()
        Dim column As New DataColumn
        column.DataType = System.Type.GetType("System.String")
        column.ColumnName = "timeSheet_code"
        tempDeletedRows.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.Int32")
        column.ColumnName = "amendment_count"
        tempDeletedRows.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.Int32")
        column.ColumnName = "business_unit_id"
        tempDeletedRows.Columns.Add(column)
        column = New DataColumn
        column.DataType = System.Type.GetType("System.Int32")
        column.ColumnName = "cost_center_id"
        tempDeletedRows.Columns.Add(column)
        If ViewState("tempDeletedRows") Is Nothing Then
            ViewState("tempDeletedRows") = tempDeletedRows
        End If
    End Sub

    '<summary>
    'getDataForSaving: Retrieves the present data available in the datalist and save into database
    '                   The data from the datalist is stored in the temporary table and save in to DB from this table
    '</summary>
    '<param name=” ”></param>
    '<returns>NOTHING</param>
    '<author>RGBSI</author>
    '<creationDate>(25-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub getDataForSaving()
        Dim dtTimeSheetData As DataTable = ViewState("dtTempTimeSheet")
        Dim monTotal = "00:00", tueTotal = "00:00", wedTotal = "00:00", thuTotal = "00:00", friTotal = "00:00", satTotal = "00:00", sunTotal = "00:00"
        Dim column As New DataColumn
        Dim noData As Boolean = True
        'monTotal = tueTotal = wedTotal = thuTotal = friTotal = satTotal = sunTotal = 
        createDataTable()
        column.ColumnName = "amendmentCount"
        column.DataType = System.Type.GetType("System.Int32")
        column.DefaultValue = Convert.ToInt32(ViewState("amendmentCount"))
        dtTempTimeSheet.Columns.Add(column)
        Dim rowCount As Integer = dlExtraHours.Items.Count

        For i = 0 To rowCount - 1


            Dim monTtl = "00:00", tueTtl = "00:00", wedTtl = "00:00", thuTtl = "00:00", friTtl = "00:00", satTtl = "00:00", sunTtl = "00:00"


            Dim monReg As TextBox = dlExtraHours.Items(i).FindControl("lblMondayRegularTime")
            Dim tueReg As TextBox = dlExtraHours.Items(i).FindControl("lblTuesdayRegularTime")
            Dim wedReg As TextBox = dlExtraHours.Items(i).FindControl("lblWednesdayRegularTime")
            Dim thuReg As TextBox = dlExtraHours.Items(i).FindControl("lblThursdayRegularTime")
            Dim friReg As TextBox = dlExtraHours.Items(i).FindControl("lblFridayRegularTime")
            Dim satReg As TextBox = dlExtraHours.Items(i).FindControl("lblSaturdayRegularTime")
            Dim sunReg As TextBox = dlExtraHours.Items(i).FindControl("lblSundayRegularTime")

            Dim monOvr As TextBox = dlExtraHours.Items(i).FindControl("lblMondayOverTime")
            Dim tueOvr As TextBox = dlExtraHours.Items(i).FindControl("lblTuesdayOverTime")
            Dim wedOvr As TextBox = dlExtraHours.Items(i).FindControl("lblWednesdayOverTime")
            Dim thuOvr As TextBox = dlExtraHours.Items(i).FindControl("lblThursdayOverTime")
            Dim friOvr As TextBox = dlExtraHours.Items(i).FindControl("lblFridayOverTime")
            Dim satOvr As TextBox = dlExtraHours.Items(i).FindControl("lblSaturdayOverTime")
            Dim sunOvr As TextBox = dlExtraHours.Items(i).FindControl("lblSundayOverTime")

            Dim monHol As TextBox = dlExtraHours.Items(i).FindControl("lblMondayHolidayTime")
            Dim tueHol As TextBox = dlExtraHours.Items(i).FindControl("lblTuesdayHolidayTime")
            Dim wedHol As TextBox = dlExtraHours.Items(i).FindControl("lblWednesdayHolidayTime")
            Dim thuHol As TextBox = dlExtraHours.Items(i).FindControl("lblThursdayHolidayTime")
            Dim friHol As TextBox = dlExtraHours.Items(i).FindControl("lblFridayHolidayTime")
            Dim satHol As TextBox = dlExtraHours.Items(i).FindControl("lblSaturdayHolidayTime")
            Dim sunHol As TextBox = dlExtraHours.Items(i).FindControl("lblSundayHolidayTime")


            Dim monUnit As TextBox = dlExtraHours.Items(i).FindControl("txtMonUnits")
            Dim tueUnit As TextBox = dlExtraHours.Items(i).FindControl("txtTueUnits")
            Dim wedUnit As TextBox = dlExtraHours.Items(i).FindControl("txtWedUnits")
            Dim thuUnit As TextBox = dlExtraHours.Items(i).FindControl("txtThuUnits")
            Dim friUnit As TextBox = dlExtraHours.Items(i).FindControl("txtFriUnits")
            Dim satUnit As TextBox = dlExtraHours.Items(i).FindControl("txtSatUnits")
            Dim sunUnit As TextBox = dlExtraHours.Items(i).FindControl("txtSunUnits")


            Dim costCentreName As String = dtTimeSheetData.Rows(i).Item(0).ToString
            Dim costCentreID As Integer = Convert.ToInt32(dtTimeSheetData.Rows(i).Item(1))
            Dim businessUnitID As Integer = Convert.ToInt32(dtTimeSheetData.Rows(i).Item(2))

            Dim newRow As DataRow = dtTempTimeSheet.NewRow
            newRow.Item(0) = costCentreName
            newRow.Item(1) = costCentreID
            newRow.Item(2) = businessUnitID

            newRow.Item(3) = monReg.Text
            newRow.Item(4) = tueReg.Text
            newRow.Item(5) = wedReg.Text
            newRow.Item(6) = thuReg.Text
            newRow.Item(7) = friReg.Text
            newRow.Item(8) = satReg.Text
            newRow.Item(9) = sunReg.Text

            newRow.Item(10) = monOvr.Text
            newRow.Item(11) = tueOvr.Text
            newRow.Item(12) = wedOvr.Text
            newRow.Item(13) = thuOvr.Text
            newRow.Item(14) = friOvr.Text
            newRow.Item(15) = satOvr.Text
            newRow.Item(16) = sunOvr.Text

            newRow.Item(17) = monHol.Text
            newRow.Item(18) = tueHol.Text
            newRow.Item(19) = wedHol.Text
            newRow.Item(20) = thuHol.Text
            newRow.Item(21) = friHol.Text
            newRow.Item(22) = satHol.Text
            newRow.Item(23) = sunHol.Text

            newRow.Item(24) = CandidateUtility.totalTime(monReg.Text, monOvr.Text, monHol.Text)
            newRow.Item(25) = CandidateUtility.totalTime(tueReg.Text, tueOvr.Text, tueHol.Text)
            newRow.Item(26) = CandidateUtility.totalTime(wedReg.Text, wedOvr.Text, wedHol.Text)
            newRow.Item(27) = CandidateUtility.totalTime(thuReg.Text, thuOvr.Text, thuHol.Text)
            newRow.Item(28) = CandidateUtility.totalTime(friReg.Text, friOvr.Text, friHol.Text)
            newRow.Item(29) = CandidateUtility.totalTime(satReg.Text, satOvr.Text, satHol.Text)
            newRow.Item(30) = CandidateUtility.totalTime(sunReg.Text, sunOvr.Text, sunHol.Text)


            newRow.Item("mon_units") = monUnit.Text
            newRow.Item("tue_units") = tueUnit.Text
            newRow.Item("wed_units") = wedUnit.Text
            newRow.Item("thu_units") = thuUnit.Text
            newRow.Item("fri_units") = friUnit.Text
            newRow.Item("sat_units") = satUnit.Text
            newRow.Item("sun_units") = sunUnit.Text


            newRow.Item("cost_center_display_order") = i + 1
            If invalidTime(monReg.Text) Or invalidTime(monOvr.Text) Or invalidTime(monHol.Text) Or _
                invalidTime(tueReg.Text) Or invalidTime(tueOvr.Text) Or invalidTime(tueHol.Text) Or _
                invalidTime(wedReg.Text) Or invalidTime(wedOvr.Text) Or invalidTime(wedHol.Text) Or _
                invalidTime(thuReg.Text) Or invalidTime(thuOvr.Text) Or invalidTime(thuHol.Text) Or _
                invalidTime(friReg.Text) Or invalidTime(friOvr.Text) Or invalidTime(friHol.Text) Or _
                invalidTime(satReg.Text) Or invalidTime(satOvr.Text) Or invalidTime(satHol.Text) Or _
                invalidTime(sunReg.Text) Or invalidTime(sunOvr.Text) Or invalidTime(sunHol.Text) Then
                'invalidTime(newRow.Item(24)) Or invalidTime(newRow.Item(25)) Or invalidTime(newRow.Item(26)) Or _
                'invalidTime(newRow.Item(27)) Or invalidTime(newRow.Item(28)) Or invalidTime(newRow.Item(29)) Or _
                'invalidTime(newRow.Item(30)) Then

                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The hours entered for timesheet should be a valid time between 00:00 and 23:59"
                Exit Sub
            End If
            mdlLoadPopup.Hide()
            monTotal = CandidateUtility.totalTime(monTotal, newRow.Item(24))
            tueTotal = CandidateUtility.totalTime(tueTotal, newRow.Item(25))
            wedTotal = CandidateUtility.totalTime(wedTotal, newRow.Item(26))
            thuTotal = CandidateUtility.totalTime(thuTotal, newRow.Item(27))
            friTotal = CandidateUtility.totalTime(friTotal, newRow.Item(28))
            satTotal = CandidateUtility.totalTime(satTotal, newRow.Item(29))
            sunTotal = CandidateUtility.totalTime(sunTotal, newRow.Item(30))


            monTtl = CandidateUtility.totalTime(monReg.Text, monOvr.Text, monHol.Text)
            tueTtl = CandidateUtility.totalTime(tueReg.Text, tueOvr.Text, tueHol.Text)
            wedTtl = CandidateUtility.totalTime(wedReg.Text, wedOvr.Text, wedHol.Text)
            thuTtl = CandidateUtility.totalTime(thuReg.Text, thuOvr.Text, thuHol.Text)
            friTtl = CandidateUtility.totalTime(friReg.Text, friOvr.Text, friHol.Text)
            satTtl = CandidateUtility.totalTime(satReg.Text, satOvr.Text, satHol.Text)
            sunTtl = CandidateUtility.totalTime(sunReg.Text, sunOvr.Text, sunHol.Text)


            If invalidTime(monTotal) Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The total hours entered for Monday should be a valid time between 00:00 and 23:59"
                Exit Sub
            ElseIf invalidTime(tueTotal) Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The total hours entered for Tuesday should be a valid time between 00:00 and 23:59"
                Exit Sub
            ElseIf invalidTime(wedTotal) Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The total hours entered for Wednesday should be a valid time between 00:00 and 23:59"
                Exit Sub
            ElseIf invalidTime(thuTotal) Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The total hours entered for Thursday should be a valid time between 00:00 and 23:59"
                Exit Sub
            ElseIf invalidTime(friTotal) Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The total hours entered for Friday should be a valid time between 00:00 and 23:59"
                Exit Sub
            ElseIf invalidTime(satTotal) Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The total hours entered for Saturday should be a valid time between 00:00 and 23:59"
                Exit Sub
            ElseIf invalidTime(sunTotal) Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = "The total hours entered for Sunday should be a valid time between 00:00 and 23:59"
                Exit Sub
            End If



            If monTtl <> "00:00" And monUnit.Text = "" And Session("is_timesheet_unit_enabled") = True Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = ConfigurationManager.AppSettings("ALERT_MSG_NEED_UNITS").ToString.Replace("%DAY%", "Monday").ToString()
                Exit Sub
            End If
            If tueTtl <> "00:00" And tueUnit.Text = "" And Session("is_timesheet_unit_enabled") = True Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = ConfigurationManager.AppSettings("ALERT_MSG_NEED_UNITS").ToString.Replace("%DAY%", "Tuesday").ToString()
                Exit Sub
            End If
            If wedTtl <> "00:00" And wedUnit.Text = "" And Session("is_timesheet_unit_enabled") = True Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = ConfigurationManager.AppSettings("ALERT_MSG_NEED_UNITS").ToString.Replace("%DAY%", "Wednesday").ToString()
                Exit Sub
            End If
            If thuTtl <> "00:00" And thuUnit.Text = "" And Session("is_timesheet_unit_enabled") = True Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = ConfigurationManager.AppSettings("ALERT_MSG_NEED_UNITS").ToString.Replace("%DAY%", "Thursday").ToString()
                Exit Sub
            End If
            If friTtl <> "00:00" And friUnit.Text = "" And Session("is_timesheet_unit_enabled") = True Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = ConfigurationManager.AppSettings("ALERT_MSG_NEED_UNITS").ToString.Replace("%DAY%", "Friday").ToString()
                Exit Sub
            End If
            If satTtl <> "00:00" And satUnit.Text = "" And Session("is_timesheet_unit_enabled") = True Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = ConfigurationManager.AppSettings("ALERT_MSG_NEED_UNITS").ToString.Replace("%DAY%", "Saturday").ToString()
                Exit Sub
            End If
            If sunTtl <> "00:00" And sunUnit.Text = "" And Session("is_timesheet_unit_enabled") = True Then
                lblMsg.Visible = True
                blnInvalidTime = True
                lblMsg.Text = ConfigurationManager.AppSettings("ALERT_MSG_NEED_UNITS").ToString.Replace("%DAY%", "Sunday").ToString()
                Exit Sub
            End If



            dtTempTimeSheet.Rows.Add(newRow)

        Next

        ViewState("dtTempTimeSheet") = dtTempTimeSheet
    End Sub

    '<summary>setRegularTime: Set the formatted regular time </summary>
    '<param name=” ”></param>
    '<returns>STRING : Formatted Time</param>
    '<author>RGBSI</author>
    '<creationDate>(26-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Function setRegularTime(ByVal regTime As Integer) As String
        Dim regHour As String
        If regTime < 10 Then
            regHour = "0" & regTime.ToString
        Else
            regHour = regTime.ToString
        End If
        regHour = regHour + ":00"
        Return regHour
    End Function
    '<summary>getOverTime: Set the formatted over time </summary>
    '<param name=” ”></param>
    '<returns>STRING : Formatted Time</param>
    '<author>RGBSI</author>
    '<creationDate>(26-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Public Function getOverTime(ByVal regularTime As String, ByVal ConfigTime As String) As String

        Dim time1(), time2() As String
        Dim min1 As Integer
        Dim min2 As Integer
        Dim minDiff As Integer
        Dim strOutTime As String = Nothing
        time1 = regularTime.Split(":")
        time2 = ConfigTime.Split(":")

        If (CInt(time1(0)) > time2(0) And CInt(time1(1)) >= CInt(time2(1))) Or _
            (CInt(time1(0)) = time2(0) And CInt(time1(1)) > CInt(time2(1))) Then
            min1 = (CInt(time1(0)) * 60) + CInt(time1(1))
            min2 = (CInt(time2(0)) * 60) + CInt(time2(1))
            minDiff = min1 - min2
            strOutTime = (Math.Floor(minDiff / 60)).ToString.PadLeft(2, "0") + ":" + (minDiff Mod 60).ToString.PadLeft(2, "0")
        Else
            strOutTime = "00:00"
        End If


        Return strOutTime

    End Function

    '<summary>getRegularTime: Set the formatted regular time </summary>
    '<param name=” ”></param>
    '<returns>STRING : Formatted Time</param>
    '<author>RGBSI</author>
    '<creationDate>(26-NOV-2010)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Public Function getRegularTime(ByVal regularTime As String, ByVal ConfigTime As String, ByVal currentDayTime As String) As String

        Dim time1(), time2(), time3() As String
        Dim min1 As Integer
        Dim min2 As Integer
        Dim min3 As Integer
        Dim minDiff As Integer
        Dim regTime As Integer
        Dim strOutTime As String = Nothing
        time1 = regularTime.Split(":")
        time2 = ConfigTime.Split(":")
        time3 = currentDayTime.Split(":")
        min1 = (CInt(time1(0)) * 60) + CInt(time1(1))
        min2 = (CInt(time2(0)) * 60) + CInt(time2(1))
        min3 = (CInt(time3(0)) * 60) + CInt(time3(1))
        minDiff = min1 - min2
        regTime = min3 - minDiff
        strOutTime = (Math.Floor(regTime / 60)).ToString.PadLeft(2, "0") + ":" + (regTime Mod 60).ToString.PadLeft(2, "0")

        Return strOutTime

    End Function



    Protected Sub btnReset_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnReset.Click
        Dim dtTempTimeSheet As DataTable = ViewState("dtTempTimeSheet")
        Dim rowCount As Integer = dtTempTimeSheet.Rows.Count
        Do While rowCount > 1
            dtTempTimeSheet.Rows.RemoveAt(rowCount - 1)
            rowCount = dtTempTimeSheet.Rows.Count
        Loop
        For columns = 3 To 23
            dtTempTimeSheet.Rows(0).Item(columns) = "00:00"
        Next
        dlExtraHours.DataSource = Nothing
        dlExtraHours.DataSource = dtTempTimeSheet
        dlExtraHours.DataBind()
        ViewState("dtTempTimeSheet") = dtTempTimeSheet
        'lblTotRegHours.Text = "00:00"
        'lblTotOvrHours.Text = "00:00"
        'lblTotHolHours.Text = "00:00"
        lblTotHours.Text = "00:00"
        EnableControls()
    End Sub

    Protected Sub gvwTimesheetDetails_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles gvwTimesheetDetails.RowDataBound
        If e.Row.RowType = DataControlRowType.DataRow Then
            Dim lblamendmentcount As Label = e.Row.FindControl("lblamendmentcount")
            ViewState("amendmentCount") = lblamendmentcount.Text
        End If
    End Sub

    Private Function invalidTime(ByVal inputTime As String) As Boolean
        If inputTime = "" Or inputTime = Nothing Or inputTime = String.Empty Or inputTime.Trim = "__:__" Then
            inputTime = "00:00"
        End If
        Dim time As String() = inputTime.Split(":")
        If Convert.ToInt16(time(0)) > 23 Then
            Return True     ' Invalid Time
        ElseIf Convert.ToInt16(time(1)) > 59 Then
            Return True     ' Invalid Time
        Else
            Return False    ' Valid Time
        End If
    End Function

    Protected Sub btnAddCostCenter_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAddCostCenter.Click
        If dlExtraHours.Items.Count > 0 Then
            Dim lblMonday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblMonday")
            Dim lblTuesday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblTuesday")
            Dim lblWednesday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblWednesday")
            Dim lblThursday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblThursday")
            Dim lblFriday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblFriday")
            Dim lblSaturday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblSaturday")
            Dim lblSunday As RadTimePicker = dlExtraHours.Items(0).FindControl("lblSunday")

            'If (lblMonday.SelectedDate = "00:00" And lblTuesday.Text = "00:00" And lblWednesday.Text = "00:00" And lblThursday.Text = "00:00" And _
            'lblFriday.Text = "00:00" And lblSaturday.Text = "00:00" And lblSunday.Text = "00:00") And (hdnCalculated.Value = "False") Then
            '    lblMsg.Text = ConfigurationManager.AppSettings("TIMESHEET_CALC_BUTTON_CLICK").ToString
            '    lnkFocus.Focus()
            '    Exit Sub
            'End If
        End If

        'hdnCalculated.Value = "True"
        selBusinessUnit.SelectedValue = ""
        lblCostCentreName.Text = ""
        btnBack.Visible = True
        btnBack.Enabled = True
        lblCostCentreNameHeading.Visible = False
        tvCostCenter.Nodes.Clear()
        updPnlBUUnit.Update()
        '22-sept-2015|Gangadhar | Closing the HideMessageRadwindow  
        ScriptManager.RegisterStartupScript(Me, Me.GetType(), Guid.NewGuid().ToString(), "ShowMessageRadwindow();", True)
        ' mdlPopup1.Show()
    End Sub

    Protected Sub dlistStatusHistory_ItemDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.DataListItemEventArgs) Handles dlistStatusHistory.ItemDataBound
        If e.Item.ItemType = ListItemType.Item Or e.Item.ItemType = ListItemType.AlternatingItem Then
            Dim lblSubject As Label = e.Item.FindControl("lblSubject")
            lblSubject.Text = StrConv(lblSubject.Text, vbProperCase)
        End If
    End Sub

    Protected Sub btnSearch_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSearch.Click
        gwCandidates.DataSource = Nothing
        gwCandidates.DataSource = CandidateUtility.getCandidatesForVendor(VMSUserUtility.getCompanyCodeForUser(Membership.GetUser.ProviderUserKey), Trim(txtFname.Text), Trim(txtLname.Text))
        gwCandidates.DataBind()
        If gwCandidates.Rows.Count - invisiblerowcount = 0 Then
            lblMsg.Visible = True
            gwCandidates.Visible = False
        Else
            lblMsg.Visible = False
            gwCandidates.Visible = True
        End If
        mdlLoadPopup.Hide()
        UpdatePanel1.Update()
    End Sub

    Protected Sub gwCandidates_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles gwCandidates.RowDataBound
        If e.Row.RowType = DataControlRowType.DataRow Then
            Dim lblPopUser_id As Label = e.Row.FindControl("lblPopUser_id")
            If lblPopUser_id.Text = prevRowUserID Then
                e.Row.Visible = False
                invisiblerowcount = invisiblerowcount + 1
            Else
                prevRowUserID = lblPopUser_id.Text
            End If
        End If
    End Sub

    Protected Sub gwCandidates_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles gwCandidates.RowCommand
        If e.CommandName = "select" Then
            Dim row As GridViewRow = DirectCast(DirectCast(e.CommandSource, LinkButton).NamingContainer, GridViewRow)
            Dim lblPopUser_id As Label = DirectCast(row.FindControl("lblPopUser_id"), Label)
            Dim lblname As Label = DirectCast(row.FindControl("lblname"), Label)
            txtGetCandidate.Text = lblname.Text
            'hdnAddAppID.Value = lblPopUser_id.Text

            Dim userId As Guid = Nothing

            Dim rdrCandidateEngagement As SqlDataReader = Nothing
            Dim rdrCandidate As SqlDataReader = Nothing
            Dim engCodeCnt As Integer = Nothing
            Dim timesheetId As String = Nothing
            'Dim candUserID As String() = ddlCandidate.SelectedValue.ToString.Split("|")
            Dim objCandGUID As New Guid(lblPopUser_id.Text)
            hdnCandUserID.Value = lblPopUser_id.Text
            userId = objCandGUID
            ViewState("timesheet_Id") = Nothing
            Dim cultureInfo As CultureInfo = Session("localizationInfo")
            ClearControls()
            lblApprUserName.Text = "Not Available"
            lblApprUserName.Style.Value = "font-style:italic"
            weekEndingDate = CDate(ddlWeekEnding.SelectedValue)
            ViewState("status_code") = ""
            trAmendedTS.Visible = False
            divCommentsHistory.Visible = False
            dlistStatusHistory.DataSource = Nothing
            dlistStatusHistory.DataBind()
            hdnEngagementCode.Value = gwCandidates.DataKeys(row.RowIndex).Values(1)

            checkForCandidateTimesheet(objCandGUID)

            mdlCandSearch.Hide()
            updPnlCandDetail.Update()
            UpdatePanel1.Update()
            mdlLoadPopup.Hide()
        End If
    End Sub

    '<summary>vmsPathToDetails_ItemDataBound: Binding the bread crump for timesheet details page for candidate and vendor </summary>
    '<param name=””></param>
    '<returns>Nothing</param>
    '<author>RGBSI</author>
    '<creationDate>(10-JUL-2012)<creationDate>
    '<version>1.0</version>
    '<history>Ver|Author|Date|Description</history>
    Private Sub vmsPathToDetails_ItemDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.SiteMapNodeItemEventArgs)
        'Dim vmsPathToDetails As SiteMapPath = DirectCast(Master.FindControl("vmsPathToDetails"), System.Web.UI.WebControls.SiteMapPath)

        If e.Item.ItemType = SiteMapNodeItemType.Parent Then
            Dim hypLinkForParent As HyperLink = e.Item.FindControl("hypLinkForParent")

            If hypLinkForParent.Text = "Timesheets" Then
                If strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_CANDIDATE") Then
                    hypLinkForParent.NavigateUrl = "~/manageTimesheets.aspx"
                ElseIf strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_COORDINATOR") Or _
                    strUserRole.ToUpper = ConfigurationManager.AppSettings("APPLICATION_ROLE_VENDOR_USER") Then
                    hypLinkForParent.NavigateUrl = "~/manageTimesheetVendor.aspx"
                End If
            End If
        End If

    End Sub

    Protected Sub Page_SaveStateComplete(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.SaveStateComplete
        ScriptManager.RegisterStartupScript(Me, Me.GetType(), "ajax", "<script>fnPageLoadTime(" + Format((DateTime.Now - MasterPage.startTime).TotalSeconds, "###0.00").ToString + ");</script>", False)
    End Sub

    Private Sub insertAlertForAction_Timesheets()
        Dim toUserId As String = Nothing
        Dim alert_message As String = Nothing

        If Not ViewState("ApproverId") = Nothing Then
            toUserId = ViewState("ApproverId").ToString
        End If
        If Not ViewState("hiring_manager_id") = Nothing Then
            If toUserId <> Nothing Then
                toUserId = toUserId & "," & ViewState("hiring_manager_id").ToString
            Else
                toUserId = ViewState("hiring_manager_id").ToString
            End If
        End If
        If Not ViewState("reporting_manager_id") Is Nothing Then
            If toUserId <> Nothing Then
                toUserId = toUserId & "," & ViewState("reporting_manager_id").ToString
            Else
                toUserId = ViewState("reporting_manager_id").ToString
            End If
        End If
        If Not ViewState("CoOrdinatorUserID") = Nothing Then
            If toUserId <> Nothing Then
                toUserId = toUserId & "," & ViewState("CoOrdinatorUserID").ToString
            Else
                toUserId = ViewState("CoOrdinatorUserID").ToString
            End If
        End If
        If Not ViewState("backupTimeSheetApprover_1") = Nothing Then
            If toUserId <> Nothing Then
                toUserId = toUserId & "," & ViewState("backupTimeSheetApprover_1").ToString
            Else
                toUserId = ViewState("backupTimeSheetApprover_1").ToString
            End If
        End If
        If Not ViewState("backupTimeSheetApprover_2") = Nothing Then
            If toUserId <> Nothing Then
                toUserId = toUserId & "," & ViewState("backupTimeSheetApprover_2").ToString
            Else
                toUserId = ViewState("backupTimeSheetApprover_2").ToString
            End If
        End If

        If toUserId <> Nothing Then
            alert_message = "~" & ConfigurationManager.AppSettings("APPROVE_TIMESHEET") & "&type=" & ConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE")
            AlertUtility.insertAlerts(toUserId, "TIMESHEET_" & ConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL"), alert_message, lblCandidateName.Text, Membership.GetUser.ProviderUserKey)
        End If
        toUserId = Nothing
        If Not ViewState("vendor_user_id") = Nothing Then
            toUserId = ViewState("vendor_user_id").ToString
        End If

        If toUserId <> Nothing Then
            alert_message = "~" & ConfigurationManager.AppSettings("APPROVE_TIMESHEET_VENDOR")
            AlertUtility.insertAlerts(toUserId, "TIMESHEET_" & ConfigurationManager.AppSettings("APPLICATION_TIMESHEET_PENDING_STATUS_CODE_FULL"), alert_message, lblCandidateName.Text, Membership.GetUser.ProviderUserKey)
        End If
    End Sub


    Private Sub disableControlForDays(ByVal totalHours As RadTimePicker, ByVal regTime As TextBox, ByVal ovrTime As TextBox, ByVal holTime As TextBox, ByVal units As TextBox)
        totalHours.Enabled = False
        totalHours.SelectedTime = New TimeSpan(0, 0, 0)
        regTime.Text = "00:00"
        ovrTime.Text = "00:00"
        holTime.Text = "00:00"
        units.Text = "0"
        totalHours.Enabled = False
        regTime.Enabled = False
        ovrTime.Enabled = False
        holTime.Enabled = False
        units.Enabled = False
    End Sub

End Class

